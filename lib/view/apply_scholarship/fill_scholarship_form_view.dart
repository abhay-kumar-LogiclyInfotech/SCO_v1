import 'dart:io';import 'package:flutter/material.dart';import 'package:flutter_svg/svg.dart';import 'package:get_it/get_it.dart';import 'package:sco_v1/resources/widgets/show_error_text.dart';import 'package:sco_v1/view/apply_scholarship/form_views/application_submission_confirmation_card.dart';import '../../l10n/app_localizations.dart';import 'package:intl/intl.dart' hide TextDirection;import 'package:logger/logger.dart';import 'package:provider/provider.dart';import 'package:sco_v1/models/account/GetListApplicationStatusModel.dart';import 'package:sco_v1/models/apply_scholarship/GetAllActiveScholarshipsModel.dart';import 'package:sco_v1/models/splash/commonData_model.dart';import 'package:sco_v1/resources/components/custom_button.dart';import 'package:sco_v1/resources/components/custom_checkbox_tile.dart';import 'package:sco_v1/resources/components/custom_simple_app_bar.dart';import 'package:sco_v1/resources/input_formatters/emirates_id_input_formatter.dart';import 'package:sco_v1/resources/validations_and_errorText.dart';import 'package:sco_v1/utils/utils.dart';import 'package:sco_v1/view/apply_scholarship/attach_file.dart';import 'package:sco_v1/view/apply_scholarship/form_views/employment_history_view.dart';import 'package:sco_v1/view/apply_scholarship/form_views/graduation_information_view.dart';import 'package:sco_v1/view/apply_scholarship/form_views/high_school_view.dart';import 'package:sco_v1/view/apply_scholarship/form_views/required_examinations_view.dart';import 'package:sco_v1/view/apply_scholarship/form_views/student_undertaking_view.dart';import 'package:sco_v1/view/apply_scholarship/steps_progress_view.dart';import 'package:sco_v1/viewModel/account/edit_application_sections_view_Model/get_submitted_application_details_by_applicaion_number_viewModel.dart';import 'package:sco_v1/viewModel/account/personal_details/get_personal_details_viewmodel.dart';import 'package:sco_v1/viewModel/apply_scholarship/FetchDraftByConfigurationKeyViewmodel.dart';import 'package:sco_v1/viewModel/apply_scholarship/find_draft_by_draft_id_viewmodel.dart';import 'package:sco_v1/viewModel/apply_scholarship/saveAsDraftViewmodel.dart';import 'package:sco_v1/viewModel/apply_scholarship/submitApplicationViewmodel.dart';import 'package:sco_v1/viewModel/authentication/get_roles_viewModel.dart';import 'package:sco_v1/viewModel/language_change_ViewModel.dart';import 'package:sco_v1/viewModel/services/auth_services.dart';import 'package:sco_v1/viewModel/services/media_services.dart';import 'package:sco_v1/viewModel/services/permission_checker_service.dart';import '../../data/response/status.dart';import '../../models/apply_scholarship/FillScholarshipFormModels.dart';import '../../resources/app_colors.dart';import '../../resources/app_text_styles.dart';import '../../resources/components/account/Custom_inforamtion_container.dart';import '../../utils/constants.dart';import '../../viewModel/account/get_list_application_status_viewmodel.dart';import '../../viewModel/apply_scholarship/attach_file_viewmodel.dart';import '../../viewModel/apply_scholarship/deleteDraftViewmodel.dart';import '../../viewModel/apply_scholarship/getAllActiveScholarshipsViewModel.dart';import '../../viewModel/services/alert_services.dart';import '../../viewModel/services/navigation_services.dart';import 'dart:convert';import 'form_view_Utils.dart';class FillScholarshipFormView extends StatefulWidget {   String? selectedScholarshipConfigurationKey;  String? draftId;   List<GetAllActiveScholarshipsModel?>? getAllActiveScholarships;  FillScholarshipFormView({super.key, this.selectedScholarshipConfigurationKey, this.draftId, this.getAllActiveScholarships});  @override  _FillScholarshipFormViewState createState() =>      _FillScholarshipFormViewState();}class _FillScholarshipFormViewState extends State<FillScholarshipFormView>    with MediaQueryMixin {  /// my required services  late NavigationServices _navigationService;  late MediaServices _mediaServices;  late AlertServices _alertService;  // late PermissionServices _permissionServices;  // late AuthService _authServices;  /// initialize the services  void _initializeServices() {    final GetIt getIt = GetIt.instance;    _navigationService = getIt.get<NavigationServices>();    _alertService = getIt.get<AlertServices>();    _mediaServices = getIt.get<MediaServices>();    // _permissionServices = getIt.get<PermissionServices>();    // _authServices = getIt.get<AuthService>();  }  /// Controller for managing the pages  final PageController _pageController = PageController();  int _currentSectionIndex = 0; /// Track current section index  int totalSections = 1; /// Assume dynamic number of sections  /// Function to navigate to the next section  void nextSection() {    if (_currentSectionIndex < totalSections - 1) {      setState(() {        _currentSectionIndex++;        _pageController.nextPage(          duration: const Duration(milliseconds: 300),          curve: Curves.easeInOut,        );      });    }  }  /// Function to navigate to the previous section  void previousSection() {    if (_currentSectionIndex > 0) {      setState(() {        _currentSectionIndex--;        _pageController.previousPage(          duration: const Duration(milliseconds: 300),          curve: Curves.easeInOut,        );      });    }  }  /// Track filled sections  List<bool> filledSections = [];  /// update sections count method  void updateSections(int sections) {    setState(() {      filledSections = List.filled(sections, false);    });  }  dynamic draftId;  /// Function to save draft  Future<void> saveDraft() async {    /// using modelProgressHud    setProcessingMode(status: true);    _finalForm();    final saveDraftProvider = Provider.of<SaveAsDraftViewmodel>(context, listen: false);    await saveDraftProvider.saveAsDraft(form: form, applicationNumber: draftId?.toString() ?? '0');    if(saveDraftProvider.apiResponse.status == Status.COMPLETED){      draftId = saveDraftProvider.apiResponse.data?.data?.applicationNumber ?? '0';    }    setProcessingMode(status: false);  }  /// scholarship title  String _scholarshipTitle = '';  /// selected scholarship:  GetAllActiveScholarshipsModel? _selectedScholarship;  /// function to set selected scholarship Future<bool>  _getSelectedScholarship(langProvider) async{    try {      final allScholarships =  Provider.of<GetAllActiveScholarshipsViewModel>(context,listen:false);      await allScholarships.getAllActiveScholarships(context: context, langProvider: langProvider);      if(allScholarships.apiResponse.status == Status.COMPLETED && widget.selectedScholarshipConfigurationKey != null){        /// Get selected scholarship from the provided key        _selectedScholarship =  allScholarships.apiResponse.data?.firstWhere((scholarship) => scholarship.configurationKey == widget.selectedScholarshipConfigurationKey);        /// refreshing the selected scholarship        setState(() {        });        return true;      }      // Handling the form when opening from application statuses      if(widget.draftId != null){        /// Fetch draft by draft id        final draftProvider = Provider.of<FindDraftByDraftIdViewmodel>(context, listen: false);        await draftProvider.findDraftByDraftId(draftId: widget.draftId.toString());        if(draftProvider.apiResponse.status == Status.COMPLETED){          _selectedScholarship = allScholarships.apiResponse.data?.firstWhere((scholarship) => scholarship.configurationKey == draftProvider.apiResponse.data?.scholarshipConfId);          draftId = draftProvider.apiResponse.data?.applicationId;          setState(() {          });          return true;        }      }        return false;     } catch (e) {      _alertService.toastMessage("An error occurred while trying to fetch the selected scholarship. Please try again.");      return false;    }  }  /// creating the title for scholarship(Name of the scholarship visible to the user) and number of tabs using multiple conditions  void _setTitleAndTotalSections({required BuildContext context}) {   final localization = AppLocalizations.of(context)!;    try {      if (_selectedScholarship != null) {        /// Internal Bachelor        if (_selectedScholarship!.configurationKey == 'SCOUGRDINT') {          setState(() {            _scholarshipTitle = localization.internalBachelor;            totalSections = 7; /// Example number of sections          });        }        /// Internal Postgraduate        else if (_selectedScholarship!.configurationKey == 'SCOPGRDINT') {          setState(() {            _scholarshipTitle = localization.internalPostgraduate;            totalSections = 8; /// Example number of sections          });        }        /// Meterological scholarship in UAE        else if (_selectedScholarship!.configurationKey == 'SCOMETLOGINT') {          setState(() {            _scholarshipTitle = localization.internalMeterological;            totalSections = 7; /// Example number of sections          });        }        /// Bachelor Graduation scholarship outside UAE        else if (_selectedScholarship!.configurationKey == 'SCOUGRDEXT') {          setState(() {            _scholarshipTitle = localization.externalBachelor;            totalSections = 7; /// Example number of sections          });        }        /// Bachelor Graduation scholarship outside UAE        else if (_selectedScholarship!.configurationKey == 'SCONLUEXT') {          setState(() {            _scholarshipTitle = "Under Graduate External NLU";            totalSections = 7; /// Example number of sections          });        }        /// Bachelor Post Graduation scholarship outside UAE        else if (_selectedScholarship!.configurationKey == 'SCOPGRDEXT') {          setState(() {            _scholarshipTitle = localization.externalPostgraduate;            totalSections = 8; /// Example number of sections          });        }        /// External Doctors        else if (_selectedScholarship!.configurationKey == 'SCODDSEXT') {          setState(() {            _scholarshipTitle = localization.externalDoctorsOutsideUae;            totalSections = 8; /// Example number of sections          });        }        /// University Preparation Scholarship        else if (_selectedScholarship!.configurationKey == 'SCOUPPEXT') {          setState(() {            _scholarshipTitle = localization.universityPreparationProgram;            totalSections = 6; /// Example number of sections          });        }        /// Actuarial Science Mission - Bachelor's Degree        else if (_selectedScholarship!.configurationKey == 'SCOACTUGRD') {          setState(() {            _scholarshipTitle = localization.actuarialScience;            totalSections = 7; /// Example number of sections          });        }        /// Medical Profession Program        else if (_selectedScholarship!.configurationKey == 'SCOAHCPEXT') {          setState(() {            _scholarshipTitle = "Medical Profession Program"; /// TODO: fix name for localization            totalSections = 8; /// Example number of sections          });        }        /// Post graduation external medicine        // else if (_selectedScholarship!.configurationKey == 'SCOPGRDMDEXT') {        //   setState(() {        //     _scholarshipTitle = "Post Graduation External medicin"; /// TODO: fix name for localization        //     totalSections = 8; /// Example number of sections        //   });        // }      } else {        throw "_selectedScholarship is found null";      }    } catch (e) {      // _alertService.toastMessage("An error occurred while trying to set the title & number of tabs of the selected scholarship. Please try again.");      // debugPrint("Something went wrong: $e");    }  }  final _notifier = ValueNotifier<AsyncSnapshot<void>>(const AsyncSnapshot.waiting());  // Selected Checklist code for attachments  dynamic _selectedCheckListCode;  ///  Initializer to process initial data  void _initializer() {    WidgetsBinding.instance.addPostFrameCallback((callback) async {      _notifier.value = const AsyncSnapshot.withData(ConnectionState.waiting, null);      final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);      /// get selected scholarship      await  _getSelectedScholarship(langProvider);      /// set title and total sections      _setTitleAndTotalSections(context: context);      /// Initialize filledSections based on the current totalSections      updateSections(totalSections);      /// *------------------------------------------ Initialize dropdowns start ------------------------------------------------------------------*      /// Check and populate dropdowns only if the values exist      if (Constants.lovCodeMap['COUNTRY']?.values != null) {        _nationalityMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['COUNTRY']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['GENDER']?.values != null) {        _genderMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['GENDER']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['MARITAL_STATUS']?.values != null) {        _maritalStatusMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['MARITAL_STATUS']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['RELATIONSHIP_TYPE']?.values != null) {        _relationshipTypeMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['RELATIONSHIP_TYPE']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['PHONE_TYPE']?.values != null) {        _phoneNumberTypeMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['PHONE_TYPE']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['EMIRATES_ID']?.values != null) {        _familyInformationEmiratesMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['EMIRATES_ID']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['ADDRESS_TYPE']?.values != null) {        _addressTypeMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['ADDRESS_TYPE']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['HIGH_SCHOOL_LEVEL']?.values != null) {        _highSchoolLevelMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['HIGH_SCHOOL_LEVEL']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['HIGH_SCHOOL_TYPE']?.values != null) {        _highSchoolTypeMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['HIGH_SCHOOL_TYPE']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['SUBJECT']?.values != null) {        _highSchoolSubjectsItemsList = populateUniqueSimpleValuesFromLOV(            menuItemsList: Constants.lovCodeMap['SUBJECT']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['DDS_GRAD_LEVEL#SIS_GRAD_LEVEL']?.values !=          null) {        _graduationLevelDDSMenuItems = populateCommonDataDropdown(            menuItemsList:                Constants.lovCodeMap['DDS_GRAD_LEVEL#SIS_GRAD_LEVEL']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['GRADUATION_LEVEL']?.values != null) {        _graduationLevelMenuItems = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['GRADUATION_LEVEL']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['BATCH#${_selectedScholarship?.acadmicCareer}']              ?.values !=          null) {        _caseStudyYearDropdownMenuItems = populateCommonDataDropdown(menuItemsList: Constants.lovCodeMap['BATCH#${_selectedScholarship?.acadmicCareer}']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['EXAMINATION#${_selectedScholarship?.acadmicCareer}']?.values != null) {        _requiredExaminationDropdownMenuItems = populateCommonDataDropdown(menuItemsList: Constants.lovCodeMap['EXAMINATION#${_selectedScholarship?.acadmicCareer}']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['ACAD_PROG_PGRD']?.values != null) {        _acadProgramPgrdMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['ACAD_PROG_PGRD']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['ACAD_PROG_DDS']?.values != null) {        _acadProgramDdsMenuItemsList = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['ACAD_PROG_DDS']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['UNIVERSITY_STATUS']?.values != null) {        _universityPriorityStatus = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['UNIVERSITY_STATUS']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['TEST_SCORE_VAL']?.values != null) {        _testScoreVal = populateUniqueSimpleValuesFromLOV(            menuItemsList: Constants.lovCodeMap['TEST_SCORE_VAL']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      if (Constants.lovCodeMap['EMPLOYMENT_STATUS']?.values != null) {        _employmentStatusItemsList = populateUniqueSimpleValuesFromLOV(            menuItemsList: Constants.lovCodeMap['EMPLOYMENT_STATUS']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }      addToMyAttachment({required element,required processCD,required documentCD}){        _myAttachmentsList.add(            Attachment(              attachmentNameController: TextEditingController(text: element.code.toString()),              applictantIdController: TextEditingController(),              processCdController: TextEditingController(text: processCD),              documentCdController: TextEditingController(text: documentCD),              descriptionController: TextEditingController(),              userFileNameController: TextEditingController(),              commentController: TextEditingController(),              base64StringController: TextEditingController(),              errorMessageController: TextEditingController(),              requiredController: TextEditingController(text: element.required.toString()),              fileUploadedController: TextEditingController(),              heightController: TextEditingController(),              widthController: TextEditingController(),              supportedFileTypeController: TextEditingController(),              maxFileSizeController: TextEditingController(),              applicationDetailIdController: TextEditingController(),              emiratesIdController: TextEditingController(),              isApprovedController: TextEditingController(),              fileIdController: TextEditingController(),              fileTypeController: TextEditingController(),              newFileController: TextEditingController(),              // Focus Nodes              processCdFocusNode: FocusNode(),              documentCdFocusNode: FocusNode(),              userFileNameFocusNode: FocusNode(),              commentFocusNode: FocusNode(),              requiredFocusNode: FocusNode(),              fileUploadedFocusNode: FocusNode(),              heightFocusNode: FocusNode(),              widthFocusNode: FocusNode(),              errorMessageFocusNode: FocusNode(),              supportedFileTypeFocusNode: FocusNode(),              maxFileSizeFocusNode: FocusNode(),              attachmentNameFocusNode: FocusNode(),              applicationDetailIdFocusNode: FocusNode(),              emiratesIdFocusNode: FocusNode(),              isApprovedFocusNode: FocusNode(),              fileIdFocusNode: FocusNode(),              fileTypeFocusNode: FocusNode(),              newFileFocusNode: FocusNode(),              applictantIdFocusNode: FocusNode(),              descriptionFocusNode: FocusNode(),              base64StringFocusNode: FocusNode(),              // Error Text Variables              processCdError: null,              documentCdError: null,              userFileNameError: null,              commentError: null,              requiredError: null,              fileUploadedError: null,              heightError: null,              widthError: null,              errorMessageError: null,              supportedFileTypeError: null,              maxFileSizeError: null,              attachmentNameError: null,              applicationDetailIdError: null,              emiratesIdError: null,              isApprovedError: null,              fileIdError: null,              fileTypeError: null,              newFileError: null,              applictantIdError: null,              descriptionError: null,              base64StringError: null,            )        );      }      /// if there is no approved checklist then use simple checklist        if (_selectedScholarship?.checklistCode != null && _selectedScholarship!.checklistCode.toString().isNotEmpty) {          // setting the code if already given;          _selectedCheckListCode = _selectedScholarship?.checklistCode;          /// attachments list          _attachmentsList = populateSimpleValuesFromLOV(              menuItemsList: Constants.lovCodeMap[_selectedScholarship!.checklistCode.toString()]!.values!,              provider: langProvider,              textColor: AppColors.scoButtonColor);          /// creating attachments list          for (var element in _attachmentsList) {            final processCD = element.code.toString().split(':').elementAt(0).toString();            final documentCD = element.code.toString().split(':').last.toString();            addToMyAttachment(element: element, documentCD: documentCD,processCD: processCD);            // print(_myAttachmentsList.length);          }        }        else{          // setting the code if not already given;          _selectedCheckListCode = "ATTACH_REQ_Y_N";          /// attachments list          _attachmentsList = populateUniqueSimpleValuesFromLOV(              menuItemsList: Constants.lovCodeMap['ATTACH_REQ_Y_N']!.values!,              provider: langProvider,              textColor: AppColors.scoButtonColor);          /// creating attachments list          for (var element in _attachmentsList) {            final processCD = element.code.toString().split(':').elementAt(0).toString();            final documentCD = element.code.toString().split(':').last.toString();            addToMyAttachment(element: element, documentCD: documentCD,processCD: processCD);          }        }      _initializeStudentDetailsModels();      /// setting studyCountry Variable      /// isStudyCountry for majors selection      isStudyCountry = _selectedScholarship?.scholarshipType == 'INT' ? true : false;      _majorsMenuItemsList = getMajors(); /// calling the getMajors method to populate the majors function      /// initializing contact information manually because Phone types are constants for first two index elements      _phoneNumberList.add(PhoneNumber(        phoneTypeController: TextEditingController(text: 'CELL'),        countryCodeController: TextEditingController(),        phoneNumberController: TextEditingController(),        isExisting: false,        preferred: true,        countryCodeFocusNode: FocusNode(),        phoneNumberFocusNode: FocusNode(),        phoneTypeFocusNode: FocusNode(),      ));      _phoneNumberList.add(PhoneNumber(        phoneTypeController: TextEditingController(text: 'GRD'),        countryCodeController: TextEditingController(),        phoneNumberController: TextEditingController(),        preferred: false,        isExisting: false,        countryCodeFocusNode: FocusNode(),        phoneNumberFocusNode: FocusNode(),        phoneTypeFocusNode: FocusNode(),      ));      /// adding at-least one address      _addAddress();      /// add high school :      if(displayHighSchool()) {        _highSchoolList.add(HighSchool(            hsLevelController: TextEditingController(text: '1'),            hsNameController: TextEditingController(),            hsCountryController: TextEditingController(),            hsStateController: TextEditingController(),            yearOfPassingController: TextEditingController(),            hsTypeController: TextEditingController(),            curriculumTypeController: TextEditingController(),            curriculumAverageController: TextEditingController(),            otherHsNameController: TextEditingController(),            passingYearController: TextEditingController(),            maxDateController: TextEditingController(),            disableStateController: TextEditingController(),            isNewController: TextEditingController(text: "true"),            highestQualificationController: TextEditingController(text: 'false'),            hsLevelFocusNode: FocusNode(),            hsNameFocusNode: FocusNode(),            hsCountryFocusNode: FocusNode(),            hsStateFocusNode: FocusNode(),            yearOfPassingFocusNode: FocusNode(),            hsTypeFocusNode: FocusNode(),            curriculumTypeFocusNode: FocusNode(),            curriculumAverageFocusNode: FocusNode(),            otherHsNameFocusNode: FocusNode(),            passingYearFocusNode: FocusNode(),            maxDateFocusNode: FocusNode(),            hsDetails: _highSchoolSubjectsItemsList                .where((element) => !element.code                    .startsWith('OTH')) /// Filter for regular subjects                .map((element) => HSDetails(                      subjectTypeController: TextEditingController(text: element.code.toString()),                      otherSubjectNameController: TextEditingController(),                      gradeController: TextEditingController(),                      subjectTypeFocusNode: FocusNode(),                      otherSubjectNameFocusNode: FocusNode(),                      gradeFocusNode: FocusNode(),              required:  element.required == true || element.required == 'true',            ))                .toList(),            otherHSDetails: _highSchoolSubjectsItemsList                .where((element) => element.code                    .startsWith('OTH')) /// Filter for regular subjects                .map(                  (element) => HSDetails(                    subjectTypeController:                        TextEditingController(text: element.code.toString()),                    gradeController: TextEditingController(),                    otherSubjectNameController: TextEditingController(),                    subjectTypeFocusNode: FocusNode(),                    gradeFocusNode: FocusNode(),                    otherSubjectNameFocusNode: FocusNode(),                    required:  element.required == true || element.required == 'true',                  ),                )                .toList(),            schoolStateDropdownMenuItems: [],            schoolNameDropdownMenuItems: [],            schoolTypeDropdownMenuItems: [],            schoolCurriculumTypeDropdownMenuItems: []));        _highSchoolList.add(HighSchool(            hsLevelController: TextEditingController(text: '3'),            hsNameController: TextEditingController(),            hsCountryController: TextEditingController(),            hsStateController: TextEditingController(),            yearOfPassingController: TextEditingController(),            hsTypeController: TextEditingController(),            curriculumTypeController: TextEditingController(),            curriculumAverageController: TextEditingController(),            otherHsNameController: TextEditingController(),            passingYearController: TextEditingController(),            maxDateController: TextEditingController(),            disableStateController: TextEditingController(),            isNewController: TextEditingController(text: "true"),            highestQualificationController: TextEditingController(text: 'false'),            hsLevelFocusNode: FocusNode(),            hsNameFocusNode: FocusNode(),            hsCountryFocusNode: FocusNode(),            hsStateFocusNode: FocusNode(),            yearOfPassingFocusNode: FocusNode(),            hsTypeFocusNode: FocusNode(),            curriculumTypeFocusNode: FocusNode(),            curriculumAverageFocusNode: FocusNode(),            otherHsNameFocusNode: FocusNode(),            passingYearFocusNode: FocusNode(),            maxDateFocusNode: FocusNode(),            hsDetails: _highSchoolSubjectsItemsList                .where((element) => !element.code                    .startsWith('OTH')) /// Filter for regular subjects                .map((element) => HSDetails(                      subjectTypeController: TextEditingController(text: element.code.toString()),                      otherSubjectNameController: TextEditingController(),                      gradeController: TextEditingController(),                      subjectTypeFocusNode: FocusNode(),                      otherSubjectNameFocusNode: FocusNode(),                      gradeFocusNode: FocusNode(),              required:  element.required == true || element.required == 'true',            ))                .toList(),            otherHSDetails: _highSchoolSubjectsItemsList                .where((element) => element.code                    .startsWith('OTH')) /// Filter for regular subjects                .map(                  (element) => HSDetails(                    subjectTypeController:                        TextEditingController(text: element.code.toString()),                    gradeController: TextEditingController(),                    otherSubjectNameController: TextEditingController(),                    subjectTypeFocusNode: FocusNode(),                    gradeFocusNode: FocusNode(),                    otherSubjectNameFocusNode: FocusNode(),                    required:  element.required == true || element.required == 'true',                  ),                )                .toList(),            schoolStateDropdownMenuItems: [],            schoolNameDropdownMenuItems: [],            schoolTypeDropdownMenuItems: [],            schoolCurriculumTypeDropdownMenuItems: []));      }      /// add graduation detail      _addGraduationDetail();      /// add majors      for (var i = 0; i < 3; i++) {        addMajorWishList();      }      /// add university priority      if (_selectedScholarship?.acadmicCareer != 'SCHL') {        addUniversityPriority();      }      if (!(_selectedScholarship?.acadmicCareer == 'SCHL' ||          _selectedScholarship?.acadmicCareer == 'HCHL')) {        /// add Required Examination        _addRequiredExamination();      }      /// add employment history      if (displayEmploymentHistory()) {        _addEmploymentHistory();      }      /// fetch student profile Information t prefill the user information      /// student profile provider for fetching pre-filling student details and verify that emirate id and email matches the profile      final studentProfileProvider = Provider.of<GetPersonalDetailsViewModel>(context, listen: false);      await studentProfileProvider.getPersonalDetails();      if (studentProfileProvider.apiResponse.status == Status.COMPLETED) {        var data = studentProfileProvider.apiResponse.data?.data?.user;        _arabicName.studentNameController.text = data?.firstName ?? '';        _arabicName.fatherNameController.text = data?.middleName ?? '';        _arabicName.grandFatherNameController.text = data?.middleName2 ?? '';        _arabicName.familyNameController.text = data?.lastName ?? '';        _englishName.studentNameController.text = data?.firstName ?? '';        _englishName.fatherNameController.text = data?.middleName ?? '';        _englishName.grandFatherNameController.text = data?.middleName2 ?? '';        _englishName.familyNameController.text = data?.lastName ?? '';        /// prefill email        _studentEmailController.text = data?.emailAddress ?? '';        /// setting emirates id        _emiratesIdController.text = data?.emirateId?.replaceAll('-', '').trim() ?? '';        /// set date of birth        _dateOfBirthController.text = data?.birthDate ?? '';        /// set Gender        _genderController.text = data?.gender ?? '';        /// set Nationality        _passportNationalityController.text = data?.nationality ?? '';        /// set phone Number        if (_phoneNumberList.isNotEmpty) {          _phoneNumberList[0].phoneNumberController.text = data?.phoneNumber ?? '';        }      }      /// fetch Draft for current Application with Configuration key     if(widget.selectedScholarshipConfigurationKey != null) { await _fetchDraft();}     /// initialize the data by fetching by draft_id     if(widget.draftId != null){       final findDraftByIdProvider = Provider.of<FindDraftByDraftIdViewmodel>(context, listen: false);       if(findDraftByIdProvider.apiResponse.status == Status.COMPLETED){         var draftData = findDraftByIdProvider.apiResponse.data;         final draft = draftData?.status; /// to ensure that draft version is available or not         if (draft != null) {           /// setting draft id ( it is used to store save draft with the same id if it is available before)           draftId = draftData?.applicationId;           _moveWithDraft(draftData);           // _initializeTheDraftFields(draftData);           /// prefill the form with the draft           /// _prefillFormWithDraft(draft);         }       }     }      _notifier.value = const AsyncSnapshot.withData(ConnectionState.done, null);    });  }  /// Function to check if the current date is within the submission period defined by `_selectedScholarship`.  /// Returns `true` if the current date falls within the range, otherwise `false`.  bool isWithinSubmissionPeriod() {    final startTimestamp = _selectedScholarship?.startDate;    final endTimestamp = _selectedScholarship?.endDate;    if (startTimestamp == null || endTimestamp == null) {      return false;    }    final currentTimestamp = DateTime.now().millisecondsSinceEpoch;    return currentTimestamp >= startTimestamp && currentTimestamp <= endTimestamp;  }  /// Check for the draft submission period.  /// If either the start date or draft end date is unavailable, the user is moved back.  /// Otherwise, check if the current date falls within the draft submission period.  bool isWithinDraftSubmissionPeriod() {    // Get the start and draft end timestamps from the selected scholarship    final startTimestamp = _selectedScholarship?.startDate;    final draftEndTimestamp = _selectedScholarship?.draftEndDate;    // If either start date or draft end date is not available, return false    if (startTimestamp == null || draftEndTimestamp == null) {      return false; // Cannot proceed if these values are missing    }    // Get the current timestamp in milliseconds    final currentTimestamp = DateTime.now().millisecondsSinceEpoch;    // Check if the current timestamp is within the start and draft end date range    return currentTimestamp >= startTimestamp && currentTimestamp <= draftEndTimestamp;  }  /// fetch draft and check if available then set draft id and if the user want to move with draft then prefill form with draft and if not then delete draft and set userId null.  Future _fetchDraft() async {    if(widget.selectedScholarshipConfigurationKey != null){  final localization = AppLocalizations.of(context)!;  final langProvider = Provider.of<LanguageChangeViewModel>(context,listen: false);  final textDirection = getTextDirection(langProvider);  /// TO FETCH THE DRAFT BY CONFIGURATION KEY  final findDraftByConfigurationKeyProvider = Provider.of<FindDraftByConfigurationKeyViewmodel>(context, listen: false);  await findDraftByConfigurationKeyProvider.findDraftByConfigurationKey(configurationKey: _selectedScholarship?.configurationKey);  if (findDraftByConfigurationKeyProvider.apiResponse.status == Status.COMPLETED) {    var draftData = findDraftByConfigurationKeyProvider.apiResponse.data;    final draft = draftData?.status; /// to ensure that draft version is available or not    if (draft != null) {      /// setting draft id ( it is used to store save draft with the same id if it is available before)      draftId = draftData?.applicationId;      return showDialog(context: context,          barrierDismissible: false,          builder: (context){        return PopScope(          canPop:false,          child:  Directionality(textDirection: getTextDirection(langProvider), child:  AlertDialog(              backgroundColor: Colors.white,            title: Text(localization.draftApplicationTitle),            content:Text(localization.draftApplicationFound),              actionsAlignment: MainAxisAlignment.end,              actions: [                /// delete draft                Consumer<DeleteDraftViewmodel>(                  builder: (context, provider, _) {                    return provider.apiResponse.status == Status.LOADING                        ? Utils.cupertinoLoadingIndicator()                        :                    CustomButton(buttonName: localization.no,buttonColor: Colors.white,borderColor: Colors.grey,textColor: Colors.grey, isLoading: false, textDirection: textDirection, onTap:                        () async {                      // Step 3: Check if the current date falls within the submission period (start and end date)                      if (isWithinSubmissionPeriod()) {                        // Case: Current date is within the allowed submission period                        // Proceed to delete draft permanently if user chooses to move with fresh submission                        await provider.deleteDraft(draftId: draftId ?? '');                        // Step 4: Check if the draft deletion is completed successfully                        if (provider.apiResponse.status == Status.COMPLETED) {                          // Reset draftId and navigate back to allow a fresh application submission                          draftId = null;                          _navigationService.goBack();                          // debugPrint("The current date is within the start and end date range.");                        }                      }                      else {                        // Case: Current date is outside the allowed submission period                        // Navigate the user to the initial screen and display a notification message                        _navigationService.goBackUntilFirstScreen();                        _alertService.showCustomSnackBar(                          // "Fresh application submission dates are over. Please try later.",                          localization.submissionformApplicaClosed,                          // context                        );                        // debugPrint("The current date is outside the start and end date range.");                      }                    },);                  },                ),                const SizedBox(height: 10),                /// go with draft                CustomButton(buttonName: localization.yes, isLoading: false, textDirection: textDirection, onTap: (){                  _moveWithDraft(draftData);                })              ],          ),)        );      });      /// prefill the form with the draft      /// _prefillFormWithDraft(draft);    }  }}  }  /// Function to move with draft application and also move back if not fulfill the requirements.  _moveWithDraft(draftData){  /// CHECK FOR THE CONDITION THAT IF DRAFT SUBMISSION DATE IS THERE ONLY THEN SUBMIT THE DRAFT APPLICATION  /// if within submission period then its ok if not then check for draft end date if within draft end date then also  /// move with draft else navigate user back and tell the user that draft submission date is also over.  if(isWithinSubmissionPeriod() || isWithinDraftSubmissionPeriod()){  _initializeTheDraftFields(draftData);  if(widget.draftId == null) {_navigationService.goBack();}  }  else{    if(widget.draftId == null) _navigationService.goBackUntilFirstScreen();    if(widget.draftId != null) _navigationService.goBack();  _alertService.showErrorSnackBar(AppLocalizations.of(context)!.draftDatesOver);  }}  /// function to initialize the data using draft  _initializeTheDraftFields(draftData){    /// clean the draft application data and prefill the fields    Map<String, dynamic> cleanedDraft = jsonDecode(cleanDraftXmlToJson(draftData?.applicationData ?? ''));    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);    if (cleanedDraft['nameAsPasport'] != null) {      _nameAsPassport.clear();      if(cleanedDraft['nameAsPasport'] is List){        for (var ele in cleanedDraft['nameAsPasport']) {          final element = PersonName.fromJson(ele);          if(element.nameTypeController.text == 'PRI'){            _arabicName = element;            _nameAsPassport.add(_arabicName);          }          if(element.nameTypeController.text == 'ENG'){            _englishName = element;            _nameAsPassport.add(_englishName);          }        }      }    }    /// passport Data Prefilled    _passportNationalityController.text = cleanedDraft['country'] ?? '';    _passportPlaceOfIssueController.text = cleanedDraft['passportIssuePlace'] ?? '';    _passportNumberController.text = cleanedDraft['passportId'] ?? '';    _passportIssueDateController.text = formatDateOnly(cleanedDraft['passportIssueDate']?.toString() ?? '');    _passportExpiryDateController.text = formatDateOnly(cleanedDraft['passportExpiryDate']?.toString() ?? '');    _passportUnifiedNoController.text = cleanedDraft['unifiedNo']?.toString() ?? '';    /// personal information prefill    _emiratesIdExpiryDateController.text = formatDateOnly(cleanedDraft['emirateIdExpiryDate']?.toString() ?? '');    _dateOfBirthController.text = formatDateOnly(cleanedDraft['dateOfBirth']?.toString() ?? '');    _placeOfBirthController.text = cleanedDraft['placeOfBirth'] ?? '';    _genderController.text = cleanedDraft['gender'] ?? '';    _maritalStatusController.text = cleanedDraft['maritalStatus'] ?? '';    _studentEmailController.text = cleanedDraft['emailId'] ?? '';    _isMotherUAECheckbox = cleanedDraft["uaeMother"] == 'true'? true : false;    havingSponsor = cleanedDraft["havingSponser"] ?? '';    /// family information    _familyInformationEmiratesController.text = cleanedDraft['familyNo'] ?? '';    _populateTownOnFamilyInformationEmiratesItem(langProvider: langProvider);    _familyInformationTownVillageNoController.text = cleanedDraft['town'] ?? '';    _familyInformationParentGuardianNameController.text = cleanedDraft['parentName'] ?? '';    _familyInformationRelationTypeController.text = cleanedDraft['relationType'] ?? '';    _familyInformationFamilyBookNumberController.text = cleanedDraft['familyNumber'] ?? '';    _familyInformationMotherNameController.text = cleanedDraft['motherName'] ?? '';    /// scholarship relative    _isRelativeStudyingFromScholarship = cleanedDraft['relativeStudyinScholarship'] == 'true';    if ((_isRelativeStudyingFromScholarship ?? false) && cleanedDraft['relativeDetails'] != null && cleanedDraft['relativeDetails'].toString().trim().isNotEmpty) {      _relativeInfoList.clear();      if(cleanedDraft['relativeDetails'] is List)      {        for (var element in cleanedDraft['relativeDetails']) {          _relativeInfoList.add(RelativeInfo.fromJson(element));        }      }      else{        _relativeInfoList.add(RelativeInfo.fromJson(cleanedDraft['relativeDetails']));      }    }    /// contact information    if (cleanedDraft['phoneNunbers'] != null && cleanedDraft['phoneNunbers'].toString().trim().isNotEmpty) {      _phoneNumberList.clear();      for (var element in cleanedDraft['phoneNunbers']) {        _phoneNumberList.add(PhoneNumber.fromJson(element));      }    }    /// address information    if (cleanedDraft['addressList'] != null && cleanedDraft['addressList'].toString().trim().isNotEmpty) {      _addressInformationList.clear(); /// Clear the current list      if (cleanedDraft['addressList'] is List) {        for (int index = 0;        index < cleanedDraft['addressList'].length;        index++) {          var element = cleanedDraft['addressList'][index];          _addressInformationList.add(Address.fromJson(element)); /// Add to the list          _populateStateDropdown(langProvider: langProvider, index: index);        }      } else {        _addressInformationList.add(Address.fromJson(cleanedDraft['addressList'])); /// Add to the list        _populateStateDropdown(langProvider: langProvider, index: 0);      }    }    /// military Services:    _militaryServiceController.text = cleanedDraft['militaryService'] ?? '';    switch (_militaryServiceController.text) {      case 'Y':        _isMilitaryService = MilitaryStatus.yes;      case 'N':        _isMilitaryService = MilitaryStatus.no;      case 'P':        _isMilitaryService = MilitaryStatus.postponed;      case 'R':        _isMilitaryService = MilitaryStatus.exemption;    }    _militaryServiceStartDateController.text =  formatDateOnly(cleanedDraft['militaryServiceStartDate'] ?? '');    _militaryServiceEndDateController.text =  formatDateOnly(cleanedDraft['militaryServiceEndDate'] ?? '');    _reasonForMilitaryController.text = cleanedDraft['reasonForMilitarty'] ?? '';    /// graduation details    if (cleanedDraft['graduationList'] != null &&  cleanedDraft['graduationList'].toString().trim().isNotEmpty) {      _graduationDetailsList.clear(); /// Clear the current list      if(cleanedDraft['graduationList'] is List) {        for (int index = 0; index < cleanedDraft['graduationList'].length; index++) {          var element = cleanedDraft['graduationList'][index];          _graduationDetailsList.add(GraduationInfo.fromJson(element)); /// Add to the list          /// populate dropdowns          _populateGraduationLastTermMenuItemsList(langProvider: langProvider, index: index);          _populateUniversityMenuItemsList(langProvider: langProvider, index: index);        }      }      else{        _graduationDetailsList.add(GraduationInfo.fromJson(cleanedDraft['graduationList'])); /// Add to the list        /// populate dropdowns        _populateGraduationLastTermMenuItemsList(langProvider: langProvider, index: 0);        _populateUniversityMenuItemsList(langProvider: langProvider, index: 0);      }    }    _acadProgramDdsController.text = cleanedDraft['acadProgramDds'] ?? '';    _acadProgramPgrdController.text = cleanedDraft['acadProgramPgrd'] ?? '';    /// major Details    if (cleanedDraft['majorWishList'] != null && cleanedDraft['majorWishList'] != 'true' && cleanedDraft['majorWishList'].toString().trim().isNotEmpty) {      _majorsWishlist.clear(); /// Clear the current list      if(cleanedDraft['majorWishList'] is List){        for (int index = 0;        index < cleanedDraft['majorWishList'].length;        index++) {          var element = cleanedDraft['majorWishList'][index];          _majorsWishlist.add(MajorWishList.fromJson(element)); /// Add to the list        }      }      else{        _majorsWishlist.add(MajorWishList.fromJson(cleanedDraft['majorWishList'])); /// Add to the list      }    }    /// university Priority    if (cleanedDraft['universtiesPriorityList'] != null &&  cleanedDraft['universtiesPriorityList'].toString().trim().isNotEmpty) {      _universityPriorityList.clear(); /// Clear the current list      if( cleanedDraft['universtiesPriorityList'] is List){        for (int index = 0; index < cleanedDraft['universtiesPriorityList'].length; index++) {          var element = cleanedDraft['universtiesPriorityList'][index];          _universityPriorityList.add(UniversityPriority.fromJson(element)); /// Add to the list          populateUniversitiesWishList(_universityPriorityList[index]);        }}      else{        _universityPriorityList.add(UniversityPriority.fromJson(cleanedDraft['universtiesPriorityList']));        populateUniversitiesWishList(_universityPriorityList[0]);      }    }    /// required Examinations    if (cleanedDraft['requiredExaminationList'] != null &&        cleanedDraft['requiredExaminationList'].toString().trim().isNotEmpty) { // Make sure we are checking as a string      _requiredExaminationList.clear(); // Clear the current list      if (cleanedDraft['requiredExaminationList'] is List) {        // If it's a list, iterate through it        for (int index = 0; index < cleanedDraft['requiredExaminationList'].length; index++) {          var element = cleanedDraft['requiredExaminationList'][index];          _requiredExaminationList.add(RequiredExaminations.fromJson(element)); // Add to the list          // populate examination type dropdown          _populateExaminationTypeDropdown(langProvider: langProvider, index: index);        }      } else {        // If it's not a list (presumably a single object), handle it here        _requiredExaminationList.add(RequiredExaminations.fromJson(cleanedDraft['requiredExaminationList'])); // Add to the list        _populateExaminationTypeDropdown(langProvider: langProvider, index: 0);      }    }    /// employment Status    _employmentStatus = cleanedDraft['employmentStatus'] ?? '';    /// Employment History    if (cleanedDraft['emplymentHistory'] != null && cleanedDraft['emplymentHistory'] != 'true' &&  displayEmploymentHistory()) {      _employmentHistoryList.clear(); /// Clear the current list      if (cleanedDraft['emplymentHistory'] is List) {        for (int index = 0;        index < cleanedDraft['emplymentHistory'].length;        index++) {          var element = cleanedDraft['emplymentHistory'][index];          _employmentHistoryList.add(EmploymentHistory.fromJson(              element)); /// Add to the list          /// populate examination type dropdown          _populateExaminationTypeDropdown(            langProvider: langProvider,            index: index,          );        }      } else {        _employmentHistoryList.add(EmploymentHistory.fromJson(            cleanedDraft['emplymentHistory'])); /// Add to the list        /// populate examination type dropdown        _populateExaminationTypeDropdown(          langProvider: langProvider,          index: 0,        );      }    }    /// high school    if (cleanedDraft['highSchoolList'] != null && displayHighSchool()) {      _highSchoolList.clear(); /// Clear the current list      if (cleanedDraft['highSchoolList'] is List) {        for (int index = 0; index < cleanedDraft['highSchoolList'].length; index++) {          var element = cleanedDraft['highSchoolList'][index];          _highSchoolList.add( HighSchool(              hsLevelController: TextEditingController(text: element['hsLevel']),              hsNameController: TextEditingController(text: element['hsName']),              hsCountryController: TextEditingController(text: element['hsCountry']),              hsStateController: TextEditingController(text: element['hsState']),              yearOfPassingController: TextEditingController(text: formatDateOnly(element['yearOfPassing'])),              hsTypeController: TextEditingController(text: element['hsType']),              curriculumTypeController: TextEditingController(text: element['curriculumType']),              curriculumAverageController: TextEditingController(text: element['curriculumAverage']),              otherHsNameController: TextEditingController(text: element['otherHsName'] ),              passingYearController: TextEditingController(text: element['passignYear']),              maxDateController: TextEditingController(text: formatDateOnly(element['maxDate'])),              disableStateController: TextEditingController(text: element['disableState']),              isNewController: TextEditingController(text: element['isNew']),              highestQualificationController: TextEditingController(text: element['highestQualification']),              hsLevelFocusNode: FocusNode(),              hsNameFocusNode: FocusNode(),              hsCountryFocusNode: FocusNode(),              hsStateFocusNode: FocusNode(),              yearOfPassingFocusNode: FocusNode(),              hsTypeFocusNode: FocusNode(),              curriculumTypeFocusNode: FocusNode(),              curriculumAverageFocusNode: FocusNode(),              otherHsNameFocusNode: FocusNode(),              passingYearFocusNode: FocusNode(),              maxDateFocusNode: FocusNode(),              hsDetails: (element['hsDetails'] is List                  ? (element['hsDetails'] as List)                  .map((e) => HSDetails.fromJson(e))                  .toList()                  : []), /// Provide an empty list if hsDetails is not a List              otherHSDetails: (element['otherHSDetails'] is List                  ? (element['otherHSDetails'] as List)                  .map((e) => HSDetails.fromJson(e))                  .toList()                  : []), /// Provide an empty list if otherHSDetails is not a List              schoolStateDropdownMenuItems: [],              schoolNameDropdownMenuItems: [],              schoolTypeDropdownMenuItems: [],              schoolCurriculumTypeDropdownMenuItems: [])); /// Add to the list          _populateHighSchoolStateDropdown(langProvider: langProvider,index: index);          _populateHighSchoolNameDropdown(langProvider: langProvider,index: index);          _populateHighSchoolCurriculumTypeDropdown(langProvider: langProvider,index: index);        }      } else {        _highSchoolList.add(HighSchool.fromJson(cleanedDraft['highSchoolList'])); /// Add to the list        // _populateHighSchoolStateDropdown(langProvider: langProvider,index: 0);        // _populateHighSchoolNameDropdown(langProvider: langProvider,index: 0);        // _populateHighSchoolCurriculumTypeDropdown(langProvider: langProvider,index: 0);      }    }    // print(cleanedDraft['attachments']);    // _myAttachmentsList.clear(); /// Clear the current list    //    // attachments           // if (cleanedDraft['attachments'] != null && cleanedDraft['attachments'] != '' && cleanedDraft['attachments'].toString().trim().isNotEmpty) {           //   _myAttachmentsList.clear(); /// Clear the current list           //   if(cleanedDraft['attachments'] is List){           //   for (int index = 0; index < cleanedDraft['attachments'].length; index++) {           //     var element = cleanedDraft['attachments'][index];           //     _myAttachmentsList.add(Attachment.fromJson(element));           // }}           //   else{           //     _myAttachmentsList.add(Attachment.fromJson(cleanedDraft['attachments']));           //   }           // }    // print("Hello world");    // print("Printing attachment: ${cleanedDraft['attachments']}");    // print(_myAttachmentsList.length);    if (cleanedDraft['attachments'] != null && cleanedDraft['attachments'].toString().trim().isNotEmpty) {      bool hasValidAttachments = true;      if (cleanedDraft['attachments'] is List) {        for (var element in cleanedDraft['attachments']) {          /// Check if processCD or documentCD is empty          if ((element['processCD'] == null || element['processCD'].toString().trim().isEmpty) ||              (element['documentCD'] == null || element['documentCD'].toString().trim().isEmpty)) {            hasValidAttachments = false;            break;          }        }      } else {        var element = cleanedDraft['attachments'];        /// Check if processCD or documentCD is empty for single attachment        if ((element['processCD'] == null || element['processCD'].toString().trim().isEmpty) ||            (element['documentCD'] == null || element['documentCD'].toString().trim().isEmpty)) {          hasValidAttachments = false;        }      }      if (hasValidAttachments) {        /// Clear and add attachments if valid        _myAttachmentsList.clear();        _filteredMyAttachmentsList.clear();        if (cleanedDraft['attachments'] is List) {          for (var element in cleanedDraft['attachments']) {            _myAttachmentsList.add(Attachment.fromJson(element));            _filteredMyAttachmentsList.add(Attachment.fromJson(element));          }        } else {          _myAttachmentsList.add(Attachment.fromJson(cleanedDraft['attachments']));          _filteredMyAttachmentsList.add(Attachment.fromJson(cleanedDraft['attachments']));        }      }    }    // print("Print attachment filted: ${_filteredAttachmentsList.length}");    // _navigationService.goBack();  }  /// *------------------------- Method to check that user has already applied ot not ----------------------------------*  Future<bool> _checkIfAlreadyApplied()async{    final langProvider = Provider.of<LanguageChangeViewModel>(context,listen: false);    final localization = AppLocalizations.of(context)!;    await _getSelectedScholarship(langProvider);    if(_selectedScholarship?.admitType == 'UPP'){      return true;    }    /// Get the list of applications of user    final applicationStatusProvider = Provider.of<GetListApplicationStatusViewModel>(context,listen: false);    await applicationStatusProvider.getListApplicationStatus();    String? assessmentYear;    String? cohort;    if(applicationStatusProvider.apiResponse.status == Status.COMPLETED) {      bool havingItem = applicationStatusProvider.apiResponse.data?.data?.applicationStatus.isNotEmpty ?? false;      if(havingItem){        try{          // ApplicationStatus? appliedApplication = applicationStatusProvider.apiResponse.data?.data?.applicationStatus.firstWhere((element) => element.applicationStatus.programAction != 'DRAFT' && element.applicationStatus.admitType != 'UPP');          final applicationStatuses = applicationStatusProvider.apiResponse.data?.data?.applicationStatus              .where((element) => element.applicationStatus.programAction != 'DRAFT' && element.applicationStatus.admitType != 'UPP')              .toList();          ApplicationStatus? appliedApplication = applicationStatuses?.isNotEmpty == true ? applicationStatuses!.first : null;          if(appliedApplication != null){            final getAppliedApplicationProvider = Provider.of<GetSubmittedApplicationDetailsByApplicationNumberViewModel>(context,listen: false);            await getAppliedApplicationProvider.getSubmittedApplicationDetailsByApplicationNumber(applicationNumber: appliedApplication.applicationStatus.admApplicationNumber);            if(getAppliedApplicationProvider.apiResponse.status == Status.COMPLETED){              assessmentYear = getAppliedApplicationProvider.apiResponse.data?.assesmentYear?.toString();              final GetAllActiveScholarshipsModel? applyingToScholarship =  widget.getAllActiveScholarships?.firstWhere((element)=>element?.configurationKey == widget.selectedScholarshipConfigurationKey);              cohort = applyingToScholarship?.cohort.toString();              // print("Cohort Tag for applying scholarship: ${applyingToScholarship?.cohort.toString()}");              if(assessmentYear!= null && cohort != null){                bool isAlreadyApplied = assessmentYear == cohort ;                if (isAlreadyApplied) {                  _alertService.showErrorSnackBar(localization.alreadyApplied);                  _navigationService.goBack();                  return false;                }                else {                  // User can fill the form if no application other than draft is found                  // debugPrint("You can fill the scholarship form");                  return true;                }              }            }          }          else{            return true;          }        }        catch(error){          /// if we don't have any scholarship other then upp then let the user to fill scholarship form          return true;          // _navigationService.goBack();        }      }      else{        return true;      }    }    // final localization = AppLocalizations.of(context)!;    // final bool isLoggedIn = await _authServices.isLoggedIn();    //    // if(isLoggedIn){    //   // Getting Fresh Roles    //   final getRolesProvider = Provider.of<GetRoleViewModel>(context,listen:false);    //   await getRolesProvider.getRoles();    // }    //    // final UserRole role =  getRoleFromList(HiveManager.getRole());    //    // // Show alert and go back if already applied    // if (alreadyAppliedResult) {    // if (isLoggedIn && (role == UserRole.applicants || role == UserRole.scholarStudent)) {    //   _alertService.showErrorSnackBar(localization.alreadyApplied);    //   _navigationService.goBack();    //   return false;    // }    // else {    //   // User can fill the form if no application other than draft is found    //   // debugPrint("You can fill the scholarship form");    //   return true;    // }    return false;  }  /// *------------------------- Init State of the form start ----------------------------------*  @override  void initState() {    _initializeServices();    WidgetsBinding.instance.addPostFrameCallback((callback)async{      /// initialize the services      _initializeServices();      /// check if user can apply for scholarship or not      /// Check the applications status from application-status api and if any api found else draft then move user back and tell him you already      /// had applied for this year please check your application status and if any issue persists then please contact support.    bool canApply =   await _checkIfAlreadyApplied();    if(canApply){      /// calling initializer to initialize the data      _initializer();    }    });    super.initState();    _initializeServices();  }  /// *------------------------- Init State of the form end -----------------------------------------*  /// boolean to save the state of the modelProgressHud  bool processing = false;  setProcessingMode({required bool status}){    setState(() {      processing = status;    });  }  @override  Widget build(BuildContext context) {    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: true);final localization = AppLocalizations.of(context)!;    return Scaffold(appBar: CustomSimpleAppBar(            title: Text(localization.apply_for_scholarship, style: AppTextStyles.appBarTitleStyle()),inNotifications: true,),        backgroundColor: Colors.white,        body: Utils.modelProgressHud(          processing: processing,          child: ValueListenableBuilder(              valueListenable: _notifier,              builder: (context, snapshot, child) {                if (snapshot.connectionState == ConnectionState.waiting) {                  return Center(child: Utils.pageLoadingIndicator(context: context));                }                if (snapshot.hasError) {                  return Utils.showOnError();                }                return Stack(                  children: [                    /// main form                    Directionality(                      textDirection: getTextDirection(langProvider),                      child: Column(                        crossAxisAlignment: CrossAxisAlignment.start,                        mainAxisAlignment: MainAxisAlignment.center,                        children: [                          /// title and progress section                          StepsProgressView(                            totalSections: totalSections,                            currentSectionIndex: _currentSectionIndex,                            selectedScholarship: _selectedScholarship,                            scholarshipTitle: _scholarshipTitle,                          ),                          /// Form Sections with PageView                          Expanded(                            child: PageView.builder(                                controller: _pageController,                                physics: const NeverScrollableScrollPhysics(),                                /// Disable swipe gestures                                itemCount: totalSections,                                itemBuilder: (context, index) {                                  String key = _selectedScholarship?.configurationKey ?? '';                                  String academicCareer = _selectedScholarship?.acadmicCareer ?? '';                                  /// Use a helper function to avoid repetition                                  // bool shouldShowHighSchoolDetails() {                                  //   return academicCareer == 'UG' ||                                  //       academicCareer == 'UGRD' ||                                  //       academicCareer == 'SCHL' ||                                  //       academicCareer == 'HCHL';                                  // }                                  // bool isUniversityAndMajorsRequired() {                                  //   return academicCareer != 'SCHL';                                  // }                                  // bool isRequiredExaminationDetailsRequired() {                                  //   return !(academicCareer == 'SCHL' || academicCareer == 'HCHL');                                  // }                                  // bool isAttachmentSectionForExt() {                                  //   return key == 'SCOUPPEXT';                                  // }                                  // bool shouldDisplayEmploymentHistory() {                                  //   return displayEmploymentHistory(); /// Assuming this is a helper function                                  // }                                  /// Switch case handling for index                                  switch (index) {                                  // case 0:                                  //   return _studentUndertakingSection(                                  //       step: index, langProvider: langProvider);                                    case 0:                                      return _studentDetailsSection(                                          step: index, langProvider: langProvider);                                    case 1:                                      return SingleChildScrollView(                                        child: Column(                                          children: [                                            /// High school details section if the condition matches                                            shouldShowHighSchoolDetails(academicCareer)                                                ? _highSchoolDetailsSection(step: index,                                                langProvider: langProvider)                                                : showVoid,                                            /// Graduation details section                                            _graduationDetailsSection(                                                step: index,                                                langProvider: langProvider),                                          ],                                        ),                                      );                                    case 2:                                    /// University and majors section if the condition matches                                      return shouldShowUniversityAndMajors(academicCareer)                                          ? _universityAndMajorsDetailsSection(                                          step: index, langProvider: langProvider)                                          : showVoid;                                    case 3:                                    /// Handle based on scholarship type and configuration key                                      if (shouldShowAttachmentSectionForExt(configurationKey: key)) {                                        return _attachmentsSection(                                            step: index, langProvider: langProvider);                                      }                                      else {                                        return shouldShowRequiredExaminations(academicCareer)                                            ? _requiredExaminationsDetailsSection(                                            step: index, langProvider: langProvider)                                            : showVoid;                                      }                                    case 4:                                    /// Handling based on configuration key for attachments or employment history                                      if (shouldShowAttachmentSectionForExt(configurationKey: key)) {                                        return _confirmation();                                      }                                      else if (key == 'SCOACTUGRD' ||                                          key == "SCOUGRDINT" ||                                          key == 'SCOMETLOGINT' ||                                          key == 'SCOUGRDEXT') {                                        return _attachmentsSection(step: index, langProvider: langProvider);                                      } else {                                        return shouldShowEmploymentHistory(key)                                            ? _employmentHistoryDetailsSection(                                            step: index, langProvider: langProvider)                                            : showVoid;                                      }                                    case 5:                                    /// Display confirmation based on configuration key                                      if (shouldShowAttachmentSectionForExt(configurationKey: key)) {                                        return _studentUndertakingSection(step: index, langProvider: langProvider);                                      }                                      else if (key == 'SCOACTUGRD' ||                                          key == "SCOUGRDINT" ||                                          key == "SCOMETLOGINT" ||                                          key == "SCOUGRDEXT") {                                        return _confirmation();                                      } else {                                        return _attachmentsSection(                                            step: index, langProvider: langProvider);                                      }                                    case 6:                                      if (key == 'SCOACTUGRD' ||                                          key == "SCOUGRDINT" ||                                          key == "SCOMETLOGINT" ||                                          key == "SCOUGRDEXT") {                                        return _studentUndertakingSection(step: index, langProvider: langProvider);                                      }                                      /// Confirmation at the end                                      return _confirmation();                                    case 7:                                      return _studentUndertakingSection(step: index, langProvider: langProvider);                                    default:                                      return Container(); /// Fallback for unexpected index values                                  }                                }),                          ),                        ],                      ),                    ),                    /// Draft Prev and next button                    if(!_applicationSubmitted)  Positioned(                      bottom: 0,                      child: Container(                        padding: EdgeInsets.symmetric(horizontal: kPadding),                        width: screenWidth,                        color: Colors.white,                        child: draftPrevNextButtons(langProvider),                      ),                    ),                  ],                );              })        )        );  }  /// *--------------------------------------------------------------- Accept terms and conditions start ----------------------------------------------------------------------------*  /// step-1: student undertaking  /// student undertaking check:  bool _acceptStudentUndertaking = false;  String? _acceptStudentUndertakingErrorText;  Widget _studentUndertakingSection({required int step,required LanguageChangeViewModel langProvider}){    final arabicFullName = "${_arabicName.studentNameController.text} ${_arabicName.fatherNameController.text} ${_arabicName.grandFatherNameController.text} ${_arabicName.familyNameController.text}";    final englishFullName = "${_englishName.studentNameController.text} ${_englishName.fatherNameController.text} ${_englishName.grandFatherNameController.text} ${_englishName.familyNameController.text}";    return      _applicationSubmitted ?      ApplicationSubmissionConfirmationCard(applicationNumber: _applicationNumber, arabicName: arabicFullName, englishName: englishFullName)          :        StudentUndertakingView(          errorText: _acceptStudentUndertakingErrorText,        acceptStudentUndertaking: _acceptStudentUndertaking,        selectedScholarship: _selectedScholarship,        step: step,        onSubmit: ()async {      var result = await validateSection(step: step, langProvider: langProvider);      if (result) {        // nextSection();        await _submitApplication(langProvider);      }    },        onAcceptTerms: (value) {          setState(() {            _acceptStudentUndertaking = value ?? false;            // filledSections[step] = _acceptStudentUndertaking; /// Update section as filled          });        },        filledSections: filledSections,        );  }  // / *--------------------------------------------------------------- Accept terms and conditions end ----------------------------------------------------------------------------*  //  // / *--------------------------------------------------------------- Student Details Section start ----------------------------------------------------------------------------*  // / step-2  // / *--------------------------------------------------------------- Name as Passport data start ----------------------------------------------------------------------------*  final bool isSpecialCase = false;   PersonName _arabicName = PersonName(    nameTypeController: TextEditingController(text: 'PRI'),    studentNameController: TextEditingController(),    fatherNameController: TextEditingController(),    grandFatherNameController: TextEditingController(),    familyNameController: TextEditingController(),    nameTypeFocusNode: FocusNode(),    studentNameFocusNode: FocusNode(),    fatherNameFocusNode: FocusNode(),    grandFatherNameFocusNode: FocusNode(),    familyNameFocusNode: FocusNode(),  );   PersonName _englishName = PersonName(    nameTypeController: TextEditingController(text: 'ENG'),    studentNameController: TextEditingController(),    fatherNameController: TextEditingController(),    grandFatherNameController: TextEditingController(),    familyNameController: TextEditingController(),    nameTypeFocusNode: FocusNode(),    studentNameFocusNode: FocusNode(),    fatherNameFocusNode: FocusNode(),    grandFatherNameFocusNode: FocusNode(),    familyNameFocusNode: FocusNode(),  );   List<PersonName> _nameAsPassport = [];  void _initializeStudentDetailsModels() {    _nameAsPassport = [_arabicName, _englishName];  }  /// *--------------------------------------------------------------- Name as Passport data end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- passport data start ----------------------------------------------------------------------------*  List<DropdownMenuItem> _nationalityMenuItemsList = [];  /// Private TextEditingControllers  final TextEditingController _passportNationalityController = TextEditingController();  final TextEditingController _passportNumberController = TextEditingController();  final TextEditingController _passportIssueDateController = TextEditingController();  final TextEditingController _passportExpiryDateController = TextEditingController();  final TextEditingController _passportPlaceOfIssueController = TextEditingController();  final TextEditingController _passportUnifiedNoController = TextEditingController();  /// Private FocusNodes  final FocusNode _passportNationalityFocusNode = FocusNode();  final FocusNode _passportNumberFocusNode = FocusNode();  final FocusNode _passportIssueDateFocusNode = FocusNode();  final FocusNode _passportExpiryDateFocusNode = FocusNode();  final FocusNode _passportPlaceOfIssueFocusNode = FocusNode();  final FocusNode _passportUnifiedNoFocusNode = FocusNode();  /// Error texts for validation  String? _passportNationalityError;  String? _passportNumberError;  String? _passportIssueDateError;  String? _passportExpiryDateError;  String? _passportPlaceOfIssueError;  // String? _passportUnifiedNoError;  /// *--------------------------------------------------------------- passport data end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- personal details data start ----------------------------------------------------------------------------*  List<DropdownMenuItem> _genderMenuItemsList = [];  List<DropdownMenuItem> _maritalStatusMenuItemsList = [];  /// Emirates ID  final TextEditingController _emiratesIdController = TextEditingController(text: "");/// Emirates ID Expiry Date  final TextEditingController _emiratesIdExpiryDateController = TextEditingController();/// Date of Birth  final TextEditingController _dateOfBirthController = TextEditingController();/// Place of Birth  final TextEditingController _placeOfBirthController = TextEditingController();/// Gender  final TextEditingController _genderController = TextEditingController();/// Marital Status  final TextEditingController _maritalStatusController = TextEditingController();/// Student Email Address  final TextEditingController _studentEmailController = TextEditingController();/// Is Mother UAE National?  final TextEditingController _motherUAENationalController = TextEditingController();/// Focus Nodes/// Emirates ID  final FocusNode _emiratesIdFocusNode = FocusNode();/// Emirates ID Expiry Date  final FocusNode _emiratesIdExpiryDateFocusNode = FocusNode();/// Date of Birth  final FocusNode _dateOfBirthFocusNode = FocusNode();/// Place of Birth  final FocusNode _placeOfBirthFocusNode = FocusNode();/// Gender  final FocusNode _genderFocusNode = FocusNode();/// Marital Status  final FocusNode _maritalStatusFocusNode = FocusNode();/// Student Email Address  final FocusNode _studentEmailFocusNode = FocusNode();/// Is Mother UAE National?//   final FocusNode _motherUAENationalFocusNode = FocusNode();  /// Error Variables:  /// Error text variables for Emirates ID fields  String? _emiratesIdError;  String? _emiratesIdExpiryDateError;/// Error text variables for Date of Birth and Place of Birth fields  String? _dateOfBirthError;  String? _placeOfBirthError;/// Error text variables for Gender, Marital Status, and Student Email Address fields  String? _genderError;  String? _maritalStatusError;  String? _studentEmailError;/// Error text variable for Is Mother UAE National? field//   String? _motherUAENationalError;  /// boolean variable for is mother uae  bool _isMotherUAECheckbox = false;  /// *--------------------------------------------------------------- personal details data end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- Family Information data start ----------------------------------------------------------------------------*/// Family Information is visible only when selected nationality is United Arab Emirates/// Also make son of citizens checkbox disable  /// Controllers for Family Information  final TextEditingController _familyInformationEmiratesController = TextEditingController();  final TextEditingController _familyInformationTownVillageNoController = TextEditingController();  final TextEditingController _familyInformationParentGuardianNameController = TextEditingController();  final TextEditingController _familyInformationRelationTypeController = TextEditingController();  final TextEditingController _familyInformationFamilyBookNumberController = TextEditingController();  final TextEditingController _familyInformationMotherNameController = TextEditingController();/// Focus Nodes for Family Information  final FocusNode _familyInformationEmiratesFocusNode = FocusNode();  final FocusNode _familyInformationTownVillageNoFocusNode = FocusNode();  final FocusNode _familyInformationParentGuardianNameFocusNode = FocusNode();  final FocusNode _familyInformationRelationTypeFocusNode = FocusNode();  final FocusNode _familyInformationFamilyBookNumberFocusNode = FocusNode();  final FocusNode _familyInformationMotherNameFocusNode = FocusNode();/// Error texts for validation  String? _familyInformationEmiratesErrorText;  String? _familyInformationTownVillageNoErrorText;  String? _familyInformationParentGuardianNameErrorText;  String? _familyInformationRelationTypeErrorText;  String? _familyInformationFamilyBookNumberErrorText;  String? _familyInformationMotherNameErrorText;  /// emirates menuItem List  List<DropdownMenuItem> _familyInformationEmiratesMenuItemsList = [];  /// village or town menuItem List  List<DropdownMenuItem> _familyInformationTownMenuItemsList = [];  _populateTownOnFamilyInformationEmiratesItem(      {required LanguageChangeViewModel langProvider}) {    setState(() {      _familyInformationTownMenuItemsList = populateCommonDataDropdown(          menuItemsList: Constants.lovCodeMap['VILLAGE_NUM#${_familyInformationEmiratesController.text}']?.values ?? [],          provider: langProvider,          textColor: AppColors.scoButtonColor);    });  }  /// for relation type use from relative information relation type  /// *--------------------------------------------------------------- Family Information data end ----------------------------------------------------------------------------*  /// *---------------------------------------------------------------Relative Information data start----------------------------------------------------------------------------*  bool? _isRelativeStudyingFromScholarship;  String? _isRelativeStudyingFromScholarshipErrorText;  final FocusNode _isRelativeStudyingFromScholarshipYesFocusNode = FocusNode();  /// relationship type dropdown menu items list  List<DropdownMenuItem> _relationshipTypeMenuItemsList = [];  /// List of Relative information  final List<RelativeInfo> _relativeInfoList = [];  /// Method to add a new relative section (new RelativeInfo model)  void _addRelative() {    setState(() {      _relativeInfoList.add(RelativeInfo(        relativeNameController: TextEditingController(),        countryUniversityController: TextEditingController(),        relationTypeController: TextEditingController(),        familyBookNumberController: TextEditingController(),        relativeNameFocusNode: FocusNode(),        relationTypeFocusNode: FocusNode(),        countryUniversityFocusNode: FocusNode(),        familyBookNumberFocusNode: FocusNode(),        relativeNameError: null,        relationTypeError: null,        countryUniversityError: null,        familyBookNumberError: null,      ));    });  }  /// Method to remove a relative section  void _removeRelative(int index) {    if (index >= 0 && index < _relativeInfoList.length) {      /// Check if index is valid      setState(() {        final relativeInformation = _relativeInfoList[index];        relativeInformation.relativeNameController            .dispose(); /// Dispose the controllers        relativeInformation.countryUniversityController.dispose();        relativeInformation.relationTypeController.dispose();        relativeInformation.familyBookNumberController.dispose();        relativeInformation.relativeNameFocusNode            .dispose(); /// Dispose the controllers        relativeInformation.countryUniversityFocusNode.dispose();        relativeInformation.relationTypeFocusNode.dispose();        relativeInformation.familyBookNumberFocusNode.dispose();        _relativeInfoList.removeAt(index);      });    } else {      // print("Invalid index: $index"); /// Debugging print to show invalid index    }  }  /// *---------------------------------------------------------------Relative Information data end----------------------------------------------------------------------------*  /// step-2: student details  Widget _studentDetailsSection(      {required int step, required LanguageChangeViewModel langProvider}) {    final localization = AppLocalizations.of(context);    return Container(      padding: EdgeInsets.symmetric(horizontal: kPadding),      color: Colors.grey.shade200,      child: SingleChildScrollView(        child: Column(          children: [            kSmallSpace,            CustomInformationContainer(                title: localization!.studentDetails,                expandedContent: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  mainAxisSize: MainAxisSize.min,                  children: [                    ///*--------------------------------------------------------- Arabic Name Section start ------------------------------------------------------------------------------*/                    /// Title for arabic name same as passport                    sectionTitle(title: localization.arabicNameAsPassport),                    kMinorSpace,                    sectionBackground(child: Column(                       children: [                         ///  Arabic name                         fieldHeading(                             title: localization.studentNameArabic,                             important: true,                             langProvider: langProvider),                         scholarshipFormTextField(                             currentFocusNode: _arabicName.studentNameFocusNode,                             nextFocusNode: _arabicName.fatherNameFocusNode,                             controller: _arabicName.studentNameController,                             hintText: localization.studentNameArabicWatermark,                             errorText: _arabicName.studentNameError,                             onChanged: (value) {                               setState(() {                                 if (_arabicName.studentNameFocusNode.hasFocus) {                                   /// calling to convert to json name as passport                                   _initializeStudentDetailsModels();                                   _arabicName.studentNameError =                                       ErrorText.getArabicNameError(                                           name: _arabicName.studentNameController.text,                                           context: context);                                 }                               });                             }),                         /// ****************************************************************************************************************************************************                         kFormHeight,                         /// Arabic father name                         fieldHeading(                             title: localization.fatherNameArabic,                             important: true,                             langProvider: langProvider),                         scholarshipFormTextField(                             currentFocusNode:  _arabicName.fatherNameFocusNode,                             nextFocusNode:  _arabicName.grandFatherNameFocusNode,                             controller:  _arabicName.fatherNameController,                             hintText: localization.fatherNameArabicWatermark,                             errorText:  _arabicName.fatherNameError,                             onChanged: (value) {                               setState(() {                                 if (_arabicName.fatherNameFocusNode.hasFocus) {                                   _initializeStudentDetailsModels();                                   _arabicName.fatherNameError =                                       ErrorText.getArabicNameError(                                           name: _arabicName.fatherNameController.text,                                           context: context);                                 }                               });                             }),                         /// ****************************************************************************************************************************************************                         kFormHeight,                         /// Arabic Grandfather name                         fieldHeading(                             title: localization.grandfatherNameArabic,                             important: true,                             langProvider: langProvider),                         scholarshipFormTextField(                             currentFocusNode: _arabicName.grandFatherNameFocusNode,                             nextFocusNode: _arabicName.familyNameFocusNode,                             controller: _arabicName.grandFatherNameController,                             hintText: localization.grandfatherNameArabicWatermark,                             errorText: _arabicName.grandFatherNameError,                             onChanged: (value) {                               if ( _arabicName.grandFatherNameFocusNode.hasFocus) {                                 setState(() {                                   _initializeStudentDetailsModels();                                   _arabicName.grandFatherNameError =                                       ErrorText.getArabicNameError(                                           name: _arabicName.grandFatherNameController.text,                                           context: context);                                 });                               }                             }),                         /// ****************************************************************************************************************************************************                         kFormHeight,                         /// Arabic Family name                         fieldHeading(                             title: localization.familyNameArabic,                             important: true,                             langProvider: langProvider),                         scholarshipFormTextField(                             currentFocusNode: _arabicName.familyNameFocusNode,                             nextFocusNode: _englishName.studentNameFocusNode,                             controller: _arabicName.familyNameController,                             hintText: localization.familyNameArabicWatermark,                             errorText: _arabicName.familyNameError,                             onChanged: (value) {                               if (_arabicName.familyNameFocusNode.hasFocus) {                                 setState(() {                                   _initializeStudentDetailsModels();                                   _arabicName.familyNameError =                                       ErrorText.getArabicNameError(                                           name: _arabicName.familyNameController.text,                                           context: context);                                 });                               }                             }),                         /// *--------------------------------------------------------- Arabic Name Section end ------------------------------------------------------------------------------*/                       ],                     ),),                    kFormHeight,                    /// *--------------------------------------------------------- English Name Section Start ------------------------------------------------------------------------------*/                    /// Title for English name same as passport                    sectionTitle(title: localization.englishNameAsPassport),                    kMinorSpace,                    sectionBackground(child: Column(                      children: [                        /// English student name                        fieldHeading(                            title: localization.studentNameEnglish,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _englishName.studentNameFocusNode,                            nextFocusNode: _englishName.fatherNameFocusNode,                            controller: _englishName.studentNameController,                            hintText: localization.studentNameEnglishWatermark,                            errorText: _englishName.studentNameError,                            onChanged: (value) {                              setState(() {                                if (_englishName.studentNameFocusNode.hasFocus) {                                  _initializeStudentDetailsModels();                                  _englishName.studentNameError =                                      ErrorText.getEnglishNameError(                                          name: _englishName.studentNameController.text,                                          context: context);                                }                              });                            }),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// English father name                        fieldHeading(                            title: localization.fatherNameEnglish,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode:  _englishName.fatherNameFocusNode,                            nextFocusNode:  _englishName.grandFatherNameFocusNode,                            controller:  _englishName.fatherNameController,                            hintText: localization.fatherNameEnglishWatermark,                            errorText:  _englishName.fatherNameError,                            onChanged: (value) {                              setState(() {                                if ( _englishName.fatherNameFocusNode.hasFocus) {                                  _initializeStudentDetailsModels();                                  _englishName.fatherNameError =                                      ErrorText.getEnglishNameError(                                          name:  _englishName.fatherNameController.text,                                          context: context);                                }                              });                            }),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// English Grandfather name                        fieldHeading(                            title: localization.grandfatherNameEnglish,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _englishName.grandFatherNameFocusNode,                            nextFocusNode: _englishName.familyNameFocusNode,                            controller: _englishName.grandFatherNameController,                            hintText: localization.grandfatherNameEnglishWatermark,                            errorText: _englishName.grandFatherNameError,                            onChanged: (value) {                              if (_englishName.grandFatherNameFocusNode.hasFocus) {                                setState(() {                                  _initializeStudentDetailsModels();                                  _englishName.grandFatherNameError =                                      ErrorText.getEnglishNameError(                                          name: _englishName.grandFatherNameController                                              .text,                                          context: context);                                });                              }                            }),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// English Family name                        fieldHeading(                            title:localization.familyNameEnglish,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _englishName.familyNameFocusNode,                            nextFocusNode: _passportNationalityFocusNode,                            controller: _englishName.familyNameController,                            hintText: localization.familyNameEnglishWatermark,                            errorText: _englishName.familyNameError,                            onChanged: (value) {                              if ( _englishName.familyNameFocusNode.hasFocus) {                                setState(() {                                  _initializeStudentDetailsModels();                                  _englishName.familyNameError =                                      ErrorText.getEnglishNameError(                                          name:  _englishName.familyNameController.text,                                          context: context);                                });                              }                            }),                      ],                    )),                    kFormHeight,                    ///*--------------------------------------------------------- English Name Section end ------------------------------------------------------------------------------*/                    ///*--------------------------------------------------------- Passport Data Section Start ------------------------------------------------------------------------------*/                    /// passport data heading                    sectionTitle(title: localization.passportInformation),                    kMinorSpace,                    sectionBackground(child: Column(                      children: [                        /// Nationality                        fieldHeading(                            title: localization.nationality,                            important: true,                            langProvider: langProvider),                        scholarshipFormDropdown(context:context,                          controller: _passportNationalityController,                          currentFocusNode: _passportNationalityFocusNode,                          menuItemsList: _nationalityMenuItemsList,                          hintText: localization.nationalityWatermark,                          errorText: _passportNationalityError,                          onChanged: (value) {                            _passportNationalityError = null;                            setState(() {                              _passportNationalityController.text = value!;                              _isMotherUAECheckbox = false;                              /// if nationality is not UAE then clear all the values of the family information                              if (value! != 'ARE') {                                _familyInformationEmiratesController.clear();                                _familyInformationTownVillageNoController.clear();                                _familyInformationParentGuardianNameController.clear();                                _familyInformationRelationTypeController.clear();                                _familyInformationFamilyBookNumberController.clear();                              }                              /// by default set no for military service                              _isMilitaryService = MilitaryStatus.no;                              ///This thing is creating error: don't know how to fix it:                              FocusScope.of(context).requestFocus(_passportNumberFocusNode);                            });                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// passport number                        fieldHeading(                            title: localization.passportNumber,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _passportNumberFocusNode,                            controller: _passportNumberController,                            hintText: localization.passportNumberWatermark,                            errorText: _passportNumberError,                            onChanged: (value) {                              if (_passportNumberFocusNode.hasFocus) {                                setState(() {                                  _passportNumberError =                                      ErrorText.getPassportNumberError(                                          passportNumber:                                          _passportNumberController.text,                                          context: context);                                });                              }                            }),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// Issue Date                        fieldHeading(                            title: localization.passportIssueDate,                            important: true,                            langProvider: langProvider),                        scholarshipFormDateField(                          currentFocusNode: _passportIssueDateFocusNode,                          controller: _passportIssueDateController,                          hintText: localization.passportIssueDateWatermark,                          errorText: _passportIssueDateError,                          onChanged: (value) async {                            setState(() {                              if (_passportIssueDateFocusNode.hasFocus) {                                _passportIssueDateError =                                    ErrorText.getEmptyFieldError(                                        name: _passportIssueDateController.text,                                        context: context);                              }                            });                          },                          onTap: () async {                            /// Clear the error if a date is selected                            _passportIssueDateError = null;                            DateTime? date = await showDatePicker(                              context: context,                              barrierColor:                              AppColors.scoButtonColor.withOpacity(0.1),                              barrierDismissible: false,                              locale: Provider.of<LanguageChangeViewModel>(context,                                  listen: false)                                  .appLocale,                              initialDate: DateTime.now(),                              firstDate: DateTime(1960),                              lastDate: DateTime.now(),                            );                            if (date != null) {                              setState(() {                                _passportIssueDateController.text =                                    DateFormat('yyyy-MM-dd').format(date).toString();                                Utils.requestFocus(                                    focusNode: _passportExpiryDateFocusNode,                                    context: context);                              });                            }                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// Expiry Date                        fieldHeading(                            title: localization.passportExpireDate,                            important: true,                            langProvider: langProvider),                        scholarshipFormDateField(                          currentFocusNode: _passportExpiryDateFocusNode,                          controller: _passportExpiryDateController,                          hintText: localization.passportExpireDateWatermark,                          errorText: _passportExpiryDateError,                          onChanged: (value) async {                            setState(() {                              if (_passportExpiryDateFocusNode.hasFocus) {                                _passportExpiryDateError =                                    ErrorText.getEmptyFieldError(                                        name: _passportExpiryDateController.text,                                        context: context);                              }                            });                          },                          onTap: () async {                            /// Clear the error if a date is selected                            _passportExpiryDateError = null;                            DateTime? dob = await showDatePicker(                                context: context,                                barrierColor:                                AppColors.scoButtonColor.withOpacity(0.1),                                barrierDismissible: false,                                locale: Provider.of<LanguageChangeViewModel>(                                    context,                                    listen: false)                                    .appLocale,                                initialDate: DateTime.now(),                                firstDate: DateTime.now(),                                lastDate: DateTime.now()                                    .add(const Duration(days: 50 * 365)));                            if (dob != null) {                              setState(() {                                Utils.requestFocus(                                    focusNode: _passportPlaceOfIssueFocusNode,                                    context: context);                                _passportExpiryDateController.text =                                    DateFormat('yyyy-MM-dd').format(dob).toString();                              });                            }                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// place of issue                        fieldHeading(                            title: localization.passportPlaceofIssue,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _passportPlaceOfIssueFocusNode,                            nextFocusNode: _passportUnifiedNoFocusNode,                            controller: _passportPlaceOfIssueController,                            hintText: localization.passportPlaceofIssueWatermark,                            errorText: _passportPlaceOfIssueError,                            onChanged: (value) {                              if (_passportPlaceOfIssueFocusNode.hasFocus) {                                setState(() {                                  _passportPlaceOfIssueError =                                      ErrorText.getNameArabicEnglishValidationError(                                          name: _passportPlaceOfIssueController.text,                                          context: context);                                });                              }                            }),                        /// ****************************************************************************************************************************************************                        // _selectedScholarship?.admitType == 'INT' ? showVoid :                        Column(                          children: [                            kFormHeight,                            /// passport unified number                            fieldHeading(                                title: localization.unifiedNumber,                                important: false,                                langProvider: langProvider),                            scholarshipFormTextField(                                currentFocusNode: _passportUnifiedNoFocusNode,                                nextFocusNode: _emiratesIdFocusNode,                                controller: _passportUnifiedNoController,                                hintText: localization.unifiedNumberWatermark,                                // errorText: _passportUnifiedNoError,                                onChanged: (value) {                                  // if (_passportUnifiedNoFocusNode.hasFocus) {                                  // setState(() {                                  //   _passportUnifiedNoError =                                  //       ErrorText.getUnifiedNumberError(                                  //           unifiedNumber:                                  //               _passportUnifiedNoController.text,                                  //           context: context);                                  // });                                  // }                                }),                          ],                        ),                      ],                    )),                    kFormHeight,                    /// *--------------------------------------------------------- Passport Data Section end ------------------------------------------------------------------------------*/                    /// *--------------------------------------------------------- Personal Details Section start ------------------------------------------------------------------------------*/                    /// personal Details heading                    sectionTitle(title: localization.personalDetails),                    kMinorSpace,                    sectionBackground(child: Column(                      children: [                        /// emirates id                        fieldHeading(                          title: localization.emiratesId,                          important: (_selectedScholarship!.admitType != 'INT' && isSpecialCase),                          langProvider: langProvider,                        ),                        scholarshipFormTextField(                          readOnly: !(_selectedScholarship!.admitType != 'INT' && isSpecialCase),                          filled:!(_selectedScholarship!.admitType != 'INT' && isSpecialCase),                          fillColor: !(_selectedScholarship!.admitType != 'INT' && isSpecialCase) ? AppColors.lightGrey : Colors.white ,                          currentFocusNode: _emiratesIdFocusNode,                          nextFocusNode: _emiratesIdFocusNode,                          controller: _emiratesIdController,                          hintText: localization.emiratesIdWatermark,                          errorText: _emiratesIdError,                          inputFormat: [EmiratesIDFormatter()],                          onChanged: (value) {                            if (_emiratesIdFocusNode.hasFocus) {                              setState(() {                                _emiratesIdError = ErrorText.getEmirateIdError(                                    emirateId: _emiratesIdController.text,                                    context: context);                              });                            }                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// emirates id expiry Date                        fieldHeading(                            title: localization.emirateidExpiryDate,                            important: true,                            langProvider: langProvider),                        scholarshipFormDateField(                          currentFocusNode: _emiratesIdExpiryDateFocusNode,                          controller: _emiratesIdExpiryDateController,                          hintText: localization.emirateidExpiryDateWatermark,                          errorText: _emiratesIdExpiryDateError,                          onChanged: (value) async {                            setState(() {                              if (_emiratesIdExpiryDateFocusNode.hasFocus) {                                _emiratesIdExpiryDateError =                                    ErrorText.getEmptyFieldError(                                        name: _emiratesIdExpiryDateController.text,                                        context: context);                              }                            });                          },                          onTap: () async {                            /// Clear the error if a date is selected                            _emiratesIdExpiryDateError = null;                            DateTime? date = await showDatePicker(                              context: context,                              barrierColor: AppColors.scoButtonColor.withOpacity(0.1),                              barrierDismissible: false,                              locale: Provider.of<LanguageChangeViewModel>(context, listen: false)                                  .appLocale,                              initialDate: DateTime.now(),                              firstDate: DateTime(DateTime.now().year), // Start from the current year                              lastDate: DateTime(DateTime.now().year + 10), // Extend to 10 years later                            );                            if (date != null) {                              setState(() {                                _emiratesIdExpiryDateController.text =                                    DateFormat('yyyy-MM-dd').format(date).toString();                                Utils.requestFocus(                                    focusNode: _dateOfBirthFocusNode,                                    context: context);                              });                            }                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        ///  Date of birth                        fieldHeading(                            title: localization.brithDate,                            important: true,                            langProvider: langProvider),                        scholarshipFormDateField(                          currentFocusNode: _dateOfBirthFocusNode,                          controller: _dateOfBirthController,                          hintText: localization.brithDateWatermark,                          errorText: _dateOfBirthError,                          onChanged: (value) async {                            setState(() {                              if (_dateOfBirthFocusNode.hasFocus) {                                _dateOfBirthError = ErrorText.getEmptyFieldError(                                    name: _dateOfBirthController.text,                                    context: context);                              }                            });                          },                          onTap: () async {                            /// Clear the error if a date is selected                            _dateOfBirthError = null;                            /// Define the initial date (e.g., today's date)                            final DateTime initialDate = DateTime.now();                            /// Define the start date (30 years ago from today)                            final DateTime firstDate = DateTime(initialDate.year - 30, initialDate.month, initialDate.day);                            DateTime? dob = await showDatePicker(                              context: context,                              barrierColor: AppColors.scoButtonColor.withOpacity(0.1),                              barrierDismissible: false,                              locale: Provider.of<LanguageChangeViewModel>(context, listen: false).appLocale,                              initialDate: initialDate,                              firstDate: firstDate, // 30 years ago                              lastDate: initialDate, // Today                            );                            if (dob != null) {                              setState(() {                                Utils.requestFocus(                                    focusNode: _placeOfBirthFocusNode,                                    context: context);                                _dateOfBirthController.text =                                    DateFormat('yyyy-MM-dd').format(dob).toString();                              });                            }                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// place of birth                        fieldHeading(                            title: localization.birthPlace,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _placeOfBirthFocusNode,                            nextFocusNode: _genderFocusNode,                            controller: _placeOfBirthController,                            hintText: localization.birthPlaceWatermark,                            errorText: _placeOfBirthError,                            onChanged: (value) {                              if (_placeOfBirthFocusNode.hasFocus) {                                setState(() {                                  _placeOfBirthError =                                      ErrorText.getNameArabicEnglishValidationError(                                          name: _placeOfBirthController.text,                                          context: context);                                });                              }                            }),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// Gender                        fieldHeading(                            title: localization.gender,                            important: true,                            langProvider: langProvider),                        scholarshipFormDropdown(context:context,                          controller: _genderController,                          currentFocusNode: _genderFocusNode,                          menuItemsList: _genderMenuItemsList,                          hintText: localization.genderWatermark,                          errorText: _genderError,                          onChanged: (value) {                            _genderError = null;                            setState(() {                              _genderController.text = value!;                              ///This thing is creating error: don't know how to fix it:                              Utils.requestFocus(                                  focusNode: _maritalStatusFocusNode,                                  context: context);                            });                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// Gender                        fieldHeading(                            title: localization.maritalStatus,                            important: true,                            langProvider: langProvider),                        scholarshipFormDropdown(context:context,                          controller: _maritalStatusController,                          currentFocusNode: _maritalStatusFocusNode,                          menuItemsList: _maritalStatusMenuItemsList,                          hintText: localization.maritalStatusWatermark,                          errorText: _maritalStatusError,                          onChanged: (value) {                            _maritalStatusError = null;                            setState(() {                              _maritalStatusController.text = value!;                              ///This thing is creating error: don't know how to fix it:                              Utils.requestFocus(                                  focusNode: _studentEmailFocusNode,                                  context: context);                            });                          },                        ),                        /// ****************************************************************************************************************************************************                        kFormHeight,                        /// email address                        fieldHeading(                            title: localization.emailAddress,                            important: true,                            langProvider: langProvider),                        scholarshipFormTextField(                            currentFocusNode: _studentEmailFocusNode,                            /// nextFocusNode: ,                            controller: _studentEmailController,                            hintText: localization.emailAddressWatermark,                            errorText: _studentEmailError,                            onChanged: (value) {                              if (_studentEmailFocusNode.hasFocus) {                                setState(() {                                  _studentEmailError = ErrorText.getEmailError(                                      email: _studentEmailController.text,                                      context: context);                                });                              }                            }),                        /// ****************************************************************************************************************************************************                        /// Is mother uae national                        if(_passportNationalityController.text != "ARE" && _selectedScholarship?.admitType != 'INT')                          Column(                            children: [                              kFormHeight,                              /// is mother UAE                              CustomGFCheckbox(                                  value: _isMotherUAECheckbox,                                  onChanged: (value) {                                    setState(() {                                      _isMotherUAECheckbox = value ?? false;                                      _motherUAENationalController.text =                                          _isMotherUAECheckbox.toString();                                    });                                  },                                  text: localization.uaeMother,                                  textStyle: AppTextStyles.titleTextStyle()                                      .copyWith(                                      fontSize: 14,                                      fontWeight: FontWeight.w500)),                            ],                          ),                      ],                    )),                    // Family Information                         if(_passportNationalityController.text == 'ARE')                           Column(                                crossAxisAlignment: CrossAxisAlignment.start,                                children: [                                  /// *--------------------------------------------------------- Family Information Section start ------------------------------------------------------------------------------*/                                  kFormHeight,                                  sectionTitle(title: localization.familyInformation),                                  kMinorSpace,                                  sectionBackground(child: Column(                                    children: [                                      /// Emirates                                      fieldHeading(                                          title: localization.familyEmirates,                                          important: (_passportNationalityController.text == 'ARE'),                                          langProvider: langProvider),                                      scholarshipFormDropdown(context:context,                                        controller: _familyInformationEmiratesController,                                        currentFocusNode: _familyInformationEmiratesFocusNode,                                        menuItemsList: _familyInformationEmiratesMenuItemsList,                                        hintText: localization.familyEmiratesWatermark,                                        errorText: _familyInformationEmiratesErrorText,                                        onChanged: (value) {                                          _familyInformationEmiratesErrorText = null;                                          setState(() {                                            /// setting the value for emirates type                                            _familyInformationEmiratesController.text = value!;                                            /// populate the village or town dropdown                                            _familyInformationTownMenuItemsList.clear();                                            _familyInformationTownVillageNoController.clear();                                            _populateTownOnFamilyInformationEmiratesItem(                                                langProvider: langProvider);                                            Utils.requestFocus(                                                focusNode:                                                _familyInformationTownVillageNoFocusNode,                                                context: context);                                          });                                        },                                      ),                                      /// ****************************************************************************************************************************************************                                      kFormHeight,                                      /// Emirates                                      fieldHeading(                                          title: localization.numberOfTown,                                          important: true,                                          langProvider: langProvider),                                      scholarshipFormDropdown(context:context,                                        controller:                                        _familyInformationTownVillageNoController,                                        currentFocusNode:                                        _familyInformationTownVillageNoFocusNode,                                        menuItemsList:                                        _familyInformationTownMenuItemsList,                                        hintText: localization.numberOfTownWatermark,                                        errorText:                                        _familyInformationTownVillageNoErrorText,                                        onChanged: (value) {                                          _familyInformationTownVillageNoErrorText =                                          null;                                          setState(() {                                            /// setting the value for village or town type                                            _familyInformationTownVillageNoController                                                .text = value!;                                            Utils.requestFocus(                                                focusNode:                                                _familyInformationParentGuardianNameFocusNode,                                                context: context);                                          });                                        },                                      ),                                      /// ****************************************************************************************************************************************************                                      kFormHeight,                                      /// relative name                                      fieldHeading(                                          title: localization.parentName,                                          important: true,                                          langProvider: langProvider),                                      scholarshipFormTextField(                                          currentFocusNode:                                          _familyInformationParentGuardianNameFocusNode,                                          nextFocusNode:                                          _familyInformationRelationTypeFocusNode,                                          controller:                                          _familyInformationParentGuardianNameController,                                          hintText: localization.parentName,                                          errorText:                                          _familyInformationParentGuardianNameErrorText,                                          onChanged: (value) {                                            if (_familyInformationParentGuardianNameFocusNode                                                .hasFocus) {                                              setState(() {                                                _familyInformationParentGuardianNameErrorText =                                                    ErrorText                                                        .getNameArabicEnglishValidationError(                                                        name:                                                        _familyInformationParentGuardianNameController                                                            .text,                                                        context: context);                                              });                                            }                                          }),                                      /// ****************************************************************************************************************************************************                                      kFormHeight,                                      /// Emirates                                      fieldHeading(                                          title: localization.relationType,                                          important: true,                                          langProvider: langProvider),                                      scholarshipFormDropdown(context:context,                                        controller:                                        _familyInformationRelationTypeController,                                        currentFocusNode:                                        _familyInformationRelationTypeFocusNode,                                        menuItemsList:                                        _relationshipTypeMenuItemsList,                                        hintText: localization.relationTypeWatermark,                                        errorText:                                        _familyInformationRelationTypeErrorText,                                        onChanged: (value) {                                          _familyInformationRelationTypeErrorText =                                          null;                                          setState(() {                                            /// setting the value for village or town type                                            _familyInformationRelationTypeController                                                .text = value!;                                            Utils.requestFocus(                                                focusNode:                                                _familyInformationFamilyBookNumberFocusNode,                                                context: context);                                          });                                        },                                      ),                                      /// ****************************************************************************************************************************************************                                      kFormHeight,                                      fieldHeading(                                          title: localization.familyNumber,                                          important: false,                                          langProvider: langProvider),                                      scholarshipFormTextField(                                          currentFocusNode: _familyInformationFamilyBookNumberFocusNode,                                          controller: _familyInformationFamilyBookNumberController,                                          hintText: localization.familyNumberWatermark,                                          errorText: _familyInformationFamilyBookNumberErrorText,                                          onChanged: (value) {                                            if (_familyInformationFamilyBookNumberFocusNode                                                .hasFocus) {                                              /// setState(() {                                              ///   _familyInformationFamilyBookNumberErrorText =                                              ///       ErrorText.getEmptyFieldError(                                              ///           name:                                              ///               _familyInformationFamilyBookNumberController                                              ///                   .text,                                              ///           context: context);                                              /// });                                            }                                          }),                                      /// ****************************************************************************************************************************************************                                      kFormHeight,                                      /// mother name                                      fieldHeading(                                          title: localization.motherName,                                          important: true,                                          langProvider: langProvider),                                      scholarshipFormTextField(                                          currentFocusNode:                                          _familyInformationMotherNameFocusNode,                                          controller:                                          _familyInformationMotherNameController,                                          hintText:  localization.motherNameWatermMark,                                          errorText:                                          _familyInformationMotherNameErrorText,                                          onChanged: (value) {                                            if (_familyInformationMotherNameFocusNode                                                .hasFocus) {                                              setState(() {                                                _familyInformationMotherNameErrorText =                                                    ErrorText.getEnglishArabicNumberError(                                                        input:                                                        _familyInformationMotherNameController                                                            .text,                                                        context: context);                                              });                                            }                                          }),                                    ],                                  )),                                  /// *--------------------------------------------------------- Family Information Section end ------------------------------------------------------------------------------*/                                ],                              ),                    /// *--------------------------------------------------------- Personal Details Section end ------------------------------------------------------------------------------*/                    /// *--------------------------------------------------------- Relative Information Section Start ------------------------------------------------------------------------------*/                    /// Relative Information                    kFormHeight,                    sectionTitle(title: localization.relativesInfo),                    kMinorSpace,                    sectionBackground(child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        /// heading text for user reading                        fieldHeading(                          title: localization.relativesStudyingScholarship,                          important: true,                          langProvider: langProvider,                        ),                        /// ****************************************************************************************************************************************************                        /// Yes or no : Show round checkboxes                        CustomRadioListTile(                          value: true,                          focusNode: _isRelativeStudyingFromScholarshipYesFocusNode,                          groupValue: _isRelativeStudyingFromScholarship,                          onChanged: (value) {                            setState(() {                              _isRelativeStudyingFromScholarship = value;                              _isRelativeStudyingFromScholarshipErrorText = null;                              /// add first relative                              _addRelative();                            });                          },                          title: localization.yes,                          textStyle: textFieldTextStyle,                        ),                        /// ****************************************************************************************************************************************************                        CustomRadioListTile(                            value: false,                            groupValue: _isRelativeStudyingFromScholarship,                            onChanged: (value) {                              setState(() {                                _isRelativeStudyingFromScholarship = value;                                _isRelativeStudyingFromScholarshipErrorText = null;                                /// clear the relatives list                                _relativeInfoList.clear();                              });                            },                            title: localization.no,                            textStyle: textFieldTextStyle),                        showErrorText(_isRelativeStudyingFromScholarshipErrorText),                        /// ****************************************************************************************************************************************************                        /// No: If no then don't show module to fill the relative information                        /// Yes: if yes then show module to fill the relative information                        _isRelativeStudyingFromScholarship == null                            ? showVoid                            : _isRelativeStudyingFromScholarship!                            ? Column(children: [kFormHeight,ListView.builder(                            shrinkWrap: true,                            padding: EdgeInsets.zero,                            physics: const NeverScrollableScrollPhysics(),                            itemCount: _relativeInfoList.length,                            itemBuilder: (context, index) {                              final relativeInformation = _relativeInfoList[index];                              return Column(                                mainAxisAlignment: MainAxisAlignment.center,                                crossAxisAlignment: CrossAxisAlignment.end,                                mainAxisSize: MainAxisSize.min,                                children: [                                  /// ****************************************************************************************************************************************************                                  /// relative name                                  fieldHeading(                                      title: localization.relativeName,                                      important: _isRelativeStudyingFromScholarship ?? false,                                      langProvider: langProvider),                                  scholarshipFormTextField(                                      currentFocusNode: relativeInformation                                          .relativeNameFocusNode,                                      nextFocusNode: relativeInformation                                          .relationTypeFocusNode,                                      controller: relativeInformation                                          .relativeNameController,                                      hintText: localization.relativeNameWatermark,                                      errorText: relativeInformation                                          .relativeNameError,                                      onChanged: (value) {                                        if (relativeInformation                                            .relativeNameFocusNode                                            .hasFocus) {                                          setState(() {                                            relativeInformation                                                .relativeNameError =                                                ErrorText.getNameArabicEnglishValidationError(                                                    name: _relativeInfoList[                                                    index]                                                        .relativeNameController                                                        .text,                                                    context: context);                                          });                                        }                                      }),                                  /// ****************************************************************************************************************************************************                                  /// relative relation type                                  kFormHeight,                                  fieldHeading(                                      title: localization.relationType,                                      important: _isRelativeStudyingFromScholarship ?? false,                                      langProvider: langProvider),                                  scholarshipFormDropdown(context:context,                                    controller: relativeInformation                                        .relationTypeController,                                    currentFocusNode: relativeInformation                                        .relationTypeFocusNode,                                    menuItemsList:                                    _relationshipTypeMenuItemsList,                                    hintText: localization.relationTypeWatermark,                                    errorText: relativeInformation                                        .relationTypeError,                                    onChanged: (value) {                                      relativeInformation                                          .relationTypeError = null;                                      setState(() {                                        /// setting the value for relation type                                        relativeInformation                                            .relationTypeController                                            .text = value!;                                        ///This thing is creating error: don't know how to fix it:                                        Utils.requestFocus(                                            focusNode: _relativeInfoList[                                            index]                                                .countryUniversityFocusNode,                                            context: context);                                      });                                    },                                  ),                                  /// ****************************************************************************************************************************************************                                  /// relative country-University                                  kFormHeight,                                  fieldHeading(                                      title: localization.university,                                      important: _isRelativeStudyingFromScholarship ?? false,                                      langProvider: langProvider),                                  scholarshipFormTextField(                                      currentFocusNode: relativeInformation                                          .countryUniversityFocusNode,                                      nextFocusNode: index <                                          _relativeInfoList.length - 1                                          ? _relativeInfoList[index + 1]                                          .relativeNameFocusNode                                          : null,                                      controller: relativeInformation                                          .countryUniversityController,                                      hintText: localization.universityWatermark,                                      errorText: relativeInformation                                          .countryUniversityError,                                      onChanged: (value) {                                        /// no validation has been provided                                        if (relativeInformation                                            .countryUniversityFocusNode                                            .hasFocus) {                                          setState(() {                                            relativeInformation                                                .countryUniversityError =                                                ErrorText.getEmptyFieldError(                                                    name: _relativeInfoList[                                                    index]                                                        .countryUniversityController                                                        .text,                                                    context: context);                                          });                                        }                                      }),                                  /// ****************************************************************************************************************************************************                                  /// relative country-University                                  /// kFormHeight,                                  /// fieldHeading(                                  ///     title: "Family Book Number",                                  ///     important: true,                                  ///     langProvider: langProvider),                                  /// scholarshipFormTextField(                                  ///     currentFocusNode: relativeInformation                                  ///         .familyBookNumberFocusNode,                                  ///     nextFocusNode: index <                                  ///             _relativeInfoList.length - 1                                  ///         ? _relativeInfoList[index + 1]                                  ///             .relativeNameFocusNode                                  ///         : null,                                  ///     controller: relativeInformation                                  ///         .familyBookNumberController,                                  ///     errorText: relativeInformation                                  ///         .familyBookNumberError,                                  ///     hintText: "Enter Family Book Number",                                  ///     onChanged: (value) {                                  ///       if (relativeInformation                                  ///           .familyBookNumberFocusNode                                  ///           .hasFocus) {                                  ///         setState(() {                                  ///           relativeInformation                                  ///                   .familyBookNumberError =                                  ///               ErrorText.getEnglishArabicNumberError(                                  ///                   input: _relativeInfoList[                                  ///                           index]                                  ///                       .familyBookNumberController                                  ///                       .text,                                  ///                   context: context);                                  ///         });                                  ///       }                                  ///     }),                                  /// ****************************************************************************************************************************************************                                  /// remove Relative                                  addRemoveMoreSection(                                      title: localization.deleteRowRelativeInfo,                                      add: false,                                      onChanged: () {                                        /// if we remove 0'th index item also then set _isRelativeStudying to false                                        if (_relativeInfoList.length == 1 &&                                            index == 0) {                                          _removeRelative(index);                                          _isRelativeStudyingFromScholarship =                                          false;                                        } else {                                          _removeRelative(index);                                        }                                      }),                                  /// ****************************************************************************************************************************************************                                  /// internal sections divider                                  // const MyDivider(                                  //   color: AppColors.lightGrey,                                  // ),                                  const  Divider(),                                  /// ****************************************************************************************************************************************************                                  /// space based on if not last item                                  (index != _relativeInfoList.length - 1)                                      ? kFormHeight                                      : showVoid,                                ],                              );                            })])                            : showVoid,                        /// ****************************************************************************************************************************************************                        /// Add More Information container                        _relativeInfoList.isNotEmpty                            ? addRemoveMoreSection(                            title: localization.addRowRelativeInfo,                            add: true,                            onChanged: () {                              _addRelative();                            })                            : showVoid,                      ],                    ),),                    kFormHeight,                    /// *--------------------------------------------------------- Relative Information Section end ------------------------------------------------------------------------------*/                    /// *--------------------------------------------------------- Contact Information Section start ------------------------------------------------------------------------------*/                    /// Title for Contact Information                    sectionTitle(title: localization.contactInformation),                    kMinorSpace,                    sectionBackground(child: _phoneNumberSection(),),                    kFormHeight,                    /// *--------------------------------------------------------- Contact Information Section end ------------------------------------------------------------------------------*/                    /// *--------------------------------------------------------- Address Information Section start ------------------------------------------------------------------------------*/                    /// Title for Address Information                    sectionTitle(title: localization.addressDetails),                    kMinorSpace,                    sectionBackground(child: _addressInformationSection()),                    /// *--------------------------------------------------------- Address Information Section end ------------------------------------------------------------------------------*/                    /// *--------------------------------------------------------- Military Services Information Section start ------------------------------------------------------------------------------*/                    if(_passportNationalityController.text.isNotEmpty && _passportNationalityController.text == "ARE")                         Column(                            crossAxisAlignment: CrossAxisAlignment.start,                            children: [                              kFormHeight,                              /// Military Service panel                              sectionTitle(title: localization.militaryServicePanel),                              kMinorSpace,                              sectionBackground(child: _militaryServicesSection(),),                            ],                          )                    /// *--------------------------------------------------------- Military Services  Section end ------------------------------------------------------------------------------*/                  ],                )),            const SizedBox(height: 100,),          ],        ),      ),    );  }  /// *--------------------------------------------------------------- Phone Number Information data start----------------------------------------------------------------------------*  /// phone number dropdown menu items list  List<DropdownMenuItem> _phoneNumberTypeMenuItemsList = [];  /// List of Phone Number information  final List<PhoneNumber> _phoneNumberList = [];  /// Method to add a new phone number to the contact information list  void _addPhoneNumber() {    setState(() {      _phoneNumberList.add(PhoneNumber(          countryCodeController: TextEditingController(),          phoneNumberController: TextEditingController(),          phoneTypeController: TextEditingController(),          preferred: false,          isExisting: false,          countryCodeFocusNode: FocusNode(),          phoneNumberFocusNode: FocusNode(),          phoneTypeFocusNode: FocusNode(),          phoneNumberError: null,          phoneTypeError: null,          countryCodeError: null));    });  }  /// Method to add a new phone number to the contact information list  void _removePhoneNumber(int index) {    if (index >= 2 && index < _phoneNumberList.length) {      /// Check if index is valid      setState(() {        final phoneNumber = _phoneNumberList[index];        phoneNumber.countryCodeController.dispose(); /// Dispose the controllers        phoneNumber.phoneNumberController.dispose();        phoneNumber.phoneTypeController.dispose();        phoneNumber.preferred = false;        phoneNumber.countryCodeFocusNode.dispose(); /// Dispose the controllers        phoneNumber.phoneNumberFocusNode.dispose();        phoneNumber.phoneTypeFocusNode.dispose();        _phoneNumberList.removeAt(index);      });    } else {      // print("Invalid index: $index"); /// Debugging print to show invalid index    }  }  Widget _phoneNumberSection() {    /// defining langProvider    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);    final localization = AppLocalizations.of(context)!;    return Column(      children: [        ListView.builder(            shrinkWrap: true,            padding: EdgeInsets.zero,            physics: const NeverScrollableScrollPhysics(),            itemCount: _phoneNumberList.length,            itemBuilder: (context, index) {              final phoneNumber = _phoneNumberList[index];              return Column(                mainAxisAlignment: MainAxisAlignment.center,                crossAxisAlignment: CrossAxisAlignment.end,                mainAxisSize: MainAxisSize.min,                children: [                  /// phone Type                  fieldHeading(                      title: localization.submissionPhoneType,                      important: true,                      langProvider: langProvider,                  ),                  scholarshipFormDropdown(context:context,                    readOnly: (index == 0 || index == 1),                    // filled: (index == 0 || index == 1),                    filled: true,                    fillColor: (index == 0 || index == 1) ? AppColors.lightGrey : Colors.white,                    controller: phoneNumber.phoneTypeController,                    currentFocusNode: phoneNumber.phoneTypeFocusNode,                    menuItemsList: _phoneNumberTypeMenuItemsList,                    hintText: localization.select,                    errorText: phoneNumber.phoneTypeError,                    onChanged: (value) {                      setState(() {                        phoneNumber.phoneTypeError = null;                        final isDuplicate = _phoneNumberList.any((element){                          return element != phoneNumber && element.phoneTypeController.text == value;                        });                        if(isDuplicate){                          phoneNumber.phoneTypeError = "Phone Type already exists";                        }                        else                        {                          /// setting the value for relation type                          phoneNumber.phoneTypeController.text = value!;                          ///This thing is creating error: don't know how to fix it:                          Utils.requestFocus(                              focusNode: phoneNumber.phoneNumberFocusNode,                              context: context);                        }                      });                    },                    // {                    //   phoneNumber.phoneTypeError = null;                    //   setState(() {                    //     /// setting the value for relation type                    //     phoneNumber.phoneTypeController.text = value!;                    //     ///This thing is creating error: don't know how to fix it:                    //     Utils.requestFocus(                    //         focusNode: phoneNumber.phoneNumberFocusNode,                    //         context: context);                    //   });                    // },                  ),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  fieldHeading(                      title: localization.homeNumber,                      important: true,                      langProvider: langProvider),                  scholarshipFormTextField(                      currentFocusNode: phoneNumber.phoneNumberFocusNode,                      nextFocusNode: phoneNumber.countryCodeFocusNode,                      controller: phoneNumber.phoneNumberController,                      hintText: localization.homeNumberWatermark,                      errorText: phoneNumber.phoneNumberError,                      onChanged: (value) {                        /// no validation has been provided                        if (phoneNumber.phoneNumberFocusNode.hasFocus) {                          setState(() {                            final isDuplicate = _phoneNumberList.any((element){                              return element!= phoneNumber && element.phoneNumberController.text == value;                            });                            if(isDuplicate){                              phoneNumber.phoneNumberError = localization.phoneNumberAlreadyEntered;                            }                            else{                              phoneNumber.phoneNumberController.text = value!;                              phoneNumber.phoneNumberError = ErrorText.getPhoneNumberError(phoneNumber: phoneNumber.phoneNumberController.text, context: context);                            }                          });                        }                      }                      // {                      //   /// no validation has been provided                      //   if (phoneNumber.phoneNumberFocusNode.hasFocus) {                      //     setState(() {                      //       phoneNumber.phoneNumberError =                      //           ErrorText.getPhoneNumberError(                      //               phoneNumber:                      //                   phoneNumber.phoneNumberController.text,                      //               context: context);                      //     });                      //   }                      // }                      ),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  fieldHeading(                      title: localization.submissionCountryCode,                      important: true,                      langProvider: langProvider),                  scholarshipFormTextField(                      currentFocusNode: phoneNumber.countryCodeFocusNode,                      nextFocusNode: index < _phoneNumberList.length - 1                          ? _phoneNumberList[index + 1].phoneTypeFocusNode                          : null,                      controller: phoneNumber.countryCodeController,                      hintText: localization.submissionCountryCode,                      errorText: phoneNumber.countryCodeError,                      onChanged: (value) {                        /// no validation has been provided                        if (phoneNumber.countryCodeFocusNode.hasFocus) {                          setState(() {                            phoneNumber.countryCodeError =                                ErrorText.getEmptyFieldError(                                    name:                                        phoneNumber.countryCodeController.text,                                    context: context);                          });                        }                      }),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  /// Preferred                  CustomGFCheckbox(                      value: phoneNumber.preferred,                      onChanged: (onChanged) {                        setState(() {                          for (var element in _phoneNumberList) {                          element.preferred = false;                        }                          phoneNumber.preferred = !phoneNumber.preferred;                        });                      },                      text: localization.submissionPreferred,),                  /// ****************************************************************************************************************************************************                  /// space based on condition                  (index == 0 || index == 1) ? kFormHeight : showVoid,                  /// Add More Information container                  (_phoneNumberList.isNotEmpty && (index != 0 && index != 1))                      ? addRemoveMoreSection(                          title: localization.deleteRowPhone,                          add: false,                          onChanged: () {                            _removePhoneNumber(index);                          })                      : showVoid,                  // const MyDivider(                  //   color: AppColors.lightGrey,                  // ),                 const  Divider(),                  /// ****************************************************************************************************************************************************                  /// space based on if not last item                  index != _phoneNumberList.length - 1 ? kFormHeight : showVoid,                ],              );            }),        /// Add more Phones Numbers        /// Add More Information container        _phoneNumberList.isNotEmpty            ? addRemoveMoreSection(                title: localization.addRowPhone,                add: true,                onChanged: () {                  _addPhoneNumber();                })            : showVoid,      ],    );  }  /// *---------------------------------------------------------------Phone Number Information data end----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- Address Information Section start ----------------------------------------------------------------------------*  /// address type dropdown menu Item list  List<DropdownMenuItem> _addressTypeMenuItemsList = [];  /// populate state dropdown menuItem List  _populateStateDropdown(      {required LanguageChangeViewModel langProvider, required int index}) {    setState(() {      if (Constants              .lovCodeMap[                  'STATE#${_addressInformationList[index].countryController.text}']              ?.values !=          null) {        _addressInformationList[index].stateDropdownMenuItems =            populateCommonDataDropdown(                menuItemsList: Constants                    .lovCodeMap[                        'STATE#${_addressInformationList[index].countryController.text}']!                    .values!,                provider: langProvider,                textColor: AppColors.scoButtonColor);      }    });  }  /// address list  final List<Address> _addressInformationList = [];  /// add Address  void _addAddress() {    setState(() {      _addressInformationList.add(Address(          addressTypeController: TextEditingController(),          addressLine1Controller: TextEditingController(),          addressLine2Controller: TextEditingController(),          /// Optional          cityController: TextEditingController(),          stateController: TextEditingController(),          /// Optional          postalCodeController: TextEditingController(),          /// Optional          countryController: TextEditingController(),          addressTypeFocusNode: FocusNode(),          addressLine1FocusNode: FocusNode(),          addressLine2FocusNode: FocusNode(),          /// Optional          cityFocusNode: FocusNode(),          stateFocusNode: FocusNode(),          /// Optional          postalCodeFocusNode: FocusNode(),          /// Optional          countryFocusNode: FocusNode(),          countryDropdownMenuItems: _nationalityMenuItemsList,          stateDropdownMenuItems: []));    });  }  /// remove address  void _removeAddress(int index) {    if (index >= 1 && index < _addressInformationList.length) {      setState(() {        final addressInformation = _addressInformationList[index];        /// Dispose controllers and focus nodes        addressInformation.addressTypeController.dispose();        addressInformation.addressLine1Controller.dispose();        addressInformation.addressLine2Controller.dispose(); /// Optional        addressInformation.cityController.dispose();        addressInformation.stateController.dispose(); /// Optional        addressInformation.postalCodeController.dispose(); /// Optional        addressInformation.countryController.dispose();        addressInformation.addressTypeFocusNode.dispose();        addressInformation.addressLine1FocusNode.dispose();        addressInformation.addressLine2FocusNode.dispose(); /// Optional        addressInformation.cityFocusNode.dispose();        addressInformation.stateFocusNode.dispose(); /// Optional        addressInformation.postalCodeFocusNode.dispose(); /// Optional        addressInformation.countryFocusNode.dispose();        addressInformation.countryDropdownMenuItems?.clear();        addressInformation.stateDropdownMenuItems?.clear();        /// Remove the address entry from the list        _addressInformationList.removeAt(index);      });    } else {      // print("Invalid index: $index"); /// For debugging invalid index    }  }  Widget _addressInformationSection() {    final localization = AppLocalizations.of(context)!;    /// defining langProvider    final langProvider =        Provider.of<LanguageChangeViewModel>(context, listen: false);    return Column(      children: [        ListView.builder(            shrinkWrap: true,            padding: EdgeInsets.zero,            physics: const NeverScrollableScrollPhysics(),            itemCount: _addressInformationList.length,            itemBuilder: (context, index) {              final addressInformation = _addressInformationList[index];              return Column(                mainAxisAlignment: MainAxisAlignment.center,                crossAxisAlignment: CrossAxisAlignment.end,                mainAxisSize: MainAxisSize.min,                children: [                  /// phone Type                  fieldHeading(                      title: localization.addressType,                      important: true,                      langProvider: langProvider),                  scholarshipFormDropdown(context:context,                    controller: addressInformation.addressTypeController,                    currentFocusNode: addressInformation.addressTypeFocusNode,                    menuItemsList: _addressTypeMenuItemsList,                    hintText: localization.addressTypeWatermark,                    errorText: addressInformation.addressTypeError,                    onChanged: (value) {                      addressInformation.addressTypeError = null;                      final bool isDuplicate = _addressInformationList.any((element){                        return addressInformation != element && element.addressTypeController.text == value;                      });                      if(isDuplicate){                        addressInformation.addressTypeError = localization.addresstypeDuplicate;                      }                      /// setting the value for address type                      addressInformation.addressTypeController.text = value!;                      ///This thing is creating error: don't know how to fix it:                      Utils.requestFocus(                          focusNode: addressInformation.addressLine1FocusNode,                          context: context);                    },                  ),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  fieldHeading(                      title: localization.addressLine1,                      important: true,                      langProvider: langProvider),                  scholarshipFormTextField(                      currentFocusNode:                          addressInformation.addressLine1FocusNode,                      nextFocusNode: addressInformation.addressLine2FocusNode,                      controller: addressInformation.addressLine1Controller,                      hintText: localization.addressLine1Watermark,                      errorText: addressInformation.addressLine1Error,                      onChanged: (value) {                        if (addressInformation.addressLine1FocusNode.hasFocus) {                          setState(() {                            addressInformation.addressLine1Error =                                ErrorText.getEmptyFieldError(                                    name: addressInformation                                        .addressLine1Controller.text,                                    context: context);                          });                        }                      }),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  fieldHeading(                      title: localization.addressLine2,                      important: false,                      langProvider: langProvider),                  scholarshipFormTextField(                      currentFocusNode:                          addressInformation.addressLine2FocusNode,                      nextFocusNode: addressInformation.countryFocusNode,                      controller: addressInformation.addressLine2Controller,                      hintText: localization.addressLine1Watermark,                      errorText: addressInformation.addressLine2Error,                      onChanged: (value) {                        if (addressInformation.addressLine2FocusNode.hasFocus) {                          setState(() {                            /// don't need any type of validation                            // addressInformation.addressLine2Error =                            //     ErrorText.getNameArabicEnglishValidationError(                            //         name: addressInformation                            //             .addressLine2Controller.text,                            //         context: context);                          });                        }                      }),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  /// phone Type                  fieldHeading(                      title: localization.country,                      important: true,                      langProvider: langProvider),                  scholarshipFormDropdown(context:context,                    controller: addressInformation.countryController,                    currentFocusNode: addressInformation.countryFocusNode,                    menuItemsList: _nationalityMenuItemsList,                    hintText: localization.countryWatermark,                    errorText: addressInformation.countryError,                    onChanged: (value) {                      addressInformation.countryError = null;                      setState(() {                        /// setting the value for address type                        addressInformation.countryController.text = value!;                        /// populating the state dropdown                        addressInformation.stateDropdownMenuItems?.clear();                        addressInformation.stateController.clear();                        _populateStateDropdown(langProvider: langProvider, index: index);                        addressInformation.stateDropdownMenuItems?.isEmpty ?? false ? addressInformation.disableState = true : addressInformation.disableState = false;                        ///This thing is creating error: don't know how to fix it:                        Utils.requestFocus(                            focusNode: addressInformation.stateFocusNode,                            context: context);                      });                    },                  ),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  /// phone Type                  fieldHeading(                      title: localization.emirates,                      important: addressInformation.stateDropdownMenuItems?.isNotEmpty ?? false,                      langProvider: langProvider),                  scholarshipFormDropdown(context:context,                    filled: addressInformation.stateDropdownMenuItems?.isEmpty,                    fillColor: (addressInformation.stateDropdownMenuItems?.isEmpty ?? false) ? AppColors.lightGrey : Colors.white,                    controller: addressInformation.stateController,                    currentFocusNode: addressInformation.stateFocusNode,                    menuItemsList: addressInformation.stateDropdownMenuItems,                    hintText: localization.emiratesWatermark,                    errorText: addressInformation.stateError,                    onChanged: (value) {                      addressInformation.stateError = null;                      setState(() {                        /// setting the value for address type                        addressInformation.stateController.text = value!;                        ///This thing is creating error: don't know how to fix it:                        Utils.requestFocus(                            focusNode: addressInformation.cityFocusNode,                            context: context);                      });                    },                  ),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  fieldHeading(                      title: localization.city,                      important: true,                      langProvider: langProvider),                  scholarshipFormTextField(                      currentFocusNode: addressInformation.cityFocusNode,                      nextFocusNode: addressInformation.postalCodeFocusNode,                      controller: addressInformation.cityController,                      hintText: localization.cityWatermark,                      errorText: addressInformation.cityError,                      onChanged: (value) {                        if (addressInformation.cityFocusNode.hasFocus) {                          setState(() {                            addressInformation.cityError =                                ErrorText.getNameArabicEnglishValidationError(                                    name:                                        addressInformation.cityController.text,                                    context: context);                          });                        }                      }),                  /// ****************************************************************************************************************************************************                  kFormHeight,                  fieldHeading(                      title: localization.poBox,                      important: false,                      langProvider: langProvider),                  scholarshipFormTextField(                      currentFocusNode: addressInformation.postalCodeFocusNode,                      controller: addressInformation.postalCodeController,                      hintText: localization.poboxWatermark,                      errorText: addressInformation.postalCodeError,                      onChanged: (value) {                        if (addressInformation.postalCodeFocusNode.hasFocus) {                          setState(() {                            addressInformation.postalCodeError =                                ErrorText.getPinCodeValidationError(                                    pinCode: addressInformation                                        .postalCodeController.text,                                    context: context);                          });                        }                      }),                  /// ****************************************************************************************************************************************************                  /// space based on condition                  (index == 0) ? kFormHeight : showVoid,                  /// Add More Information container                  (_addressInformationList.isNotEmpty && (index != 0))                      ? addRemoveMoreSection(                          title: localization.deleteRowAddress,                          add: false,                          onChanged: () {                            _removeAddress(index);                          })                      : showVoid,                  /// light color divider                  // const MyDivider(                  //   color: AppColors.lightGrey,                  // ),                  const Divider(),                  /// ****************************************************************************************************************************************************                  /// space based on if not last item                  index != _addressInformationList.length - 1                      ? kFormHeight                      : showVoid,                ],              );            }),        /// Add more Phones Numbers        /// Add More Information container        _addressInformationList.isNotEmpty            ? addRemoveMoreSection(                title: localization.addRowAddress,                add: true,                onChanged: () {                  _addAddress();                })            : showVoid,      ],    );  }  /// *--------------------------------------------------------------- Address Information Section end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- Military Information Section start ----------------------------------------------------------------------------*  dynamic _isMilitaryService;  /// TextEditingControllers for military service  final TextEditingController _militaryServiceController = TextEditingController();  final TextEditingController _militaryServiceStartDateController = TextEditingController();  final TextEditingController _militaryServiceEndDateController = TextEditingController();  final TextEditingController _reasonForMilitaryController = TextEditingController();  /// FocusNodes for each field  final FocusNode _militaryServiceFocusNode = FocusNode();  final FocusNode _militaryServiceStartDateFocusNode = FocusNode();  final FocusNode _militaryServiceEndDateFocusNode = FocusNode();  final FocusNode _reasonForMilitaryFocusNode = FocusNode();  /// Error texts for each field  String? _selectMilitaryServiceStatusErrorText;  String? _militaryServiceStartDateErrorText;  String? _militaryServiceEndDateErrorText;  String? _reasonForMilitaryErrorText;  /// Show round radiobuttons to select the military options  Widget _militaryServicesSection() {    final localization = AppLocalizations.of(context)!;    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        /// heading text for user reading        fieldHeading(            title: localization.militaryService,            important: true,            langProvider: langProvider),        /// ****************************************************************************************************************************************************        /// Yes or no : Show round checkboxes to select the military options        CustomRadioListTile(          value: MilitaryStatus.yes,          groupValue: _isMilitaryService,          onChanged: (value) {            setState(() {              _isMilitaryService = value;              _militaryServiceController.text = 'Y';              _selectMilitaryServiceStatusErrorText = null;            });          },          title: localization.yes,          textStyle: textFieldTextStyle,        ),        /// ****************************************************************************************************************************************************        CustomRadioListTile(            value: MilitaryStatus.no,            groupValue: _isMilitaryService,            onChanged: (value) {              setState(() {                _isMilitaryService = value;                /// if no is selected then clear the values in the text editing controllers                _militaryServiceController.text = 'N';                _militaryServiceStartDateController.clear();                _militaryServiceEndDateController.clear();                _reasonForMilitaryController.clear();                _selectMilitaryServiceStatusErrorText = null;              });            },            title: localization.no,            textStyle: textFieldTextStyle),        /// ****************************************************************************************************************************************************        CustomRadioListTile(            value: MilitaryStatus.postponed,            groupValue: _isMilitaryService,            onChanged: (value) {              setState(() {                _isMilitaryService = value;                _militaryServiceController.text = 'P';                _militaryServiceStartDateController.clear();                _militaryServiceEndDateController.clear();                _reasonForMilitaryController.clear();                _selectMilitaryServiceStatusErrorText = null;              });            },            title: localization.postpond,            textStyle: textFieldTextStyle),        /// ****************************************************************************************************************************************************        CustomRadioListTile(            value: MilitaryStatus.exemption,            groupValue: _isMilitaryService,            onChanged: (value) {              setState(() {                _isMilitaryService = value;                _militaryServiceController.text = 'R';                _militaryServiceStartDateController.clear();                _militaryServiceEndDateController.clear();                _reasonForMilitaryController.clear();                _selectMilitaryServiceStatusErrorText = null;              });            },            title: localization.relief,            textStyle: textFieldTextStyle),        /// ****************************************************************************************************************************************************        _militaryServicesFields(),        /// ****************************************************************************************************************************************************        showErrorText(_selectMilitaryServiceStatusErrorText),      ],    );  }  /// input fields based on selection on military services  Widget _militaryServicesFields() {    final localization = AppLocalizations.of(context)!;    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);    switch (_isMilitaryService) {      case MilitaryStatus.yes:        return Column(          children: [            kFormHeight,            ///  Start Date            fieldHeading(                title: localization.militaryServiceStartDate,                important: true,                langProvider: langProvider),            scholarshipFormDateField(              currentFocusNode: _militaryServiceStartDateFocusNode,              controller: _militaryServiceStartDateController,              hintText: localization.militaryServiceStartDateWatermark,              errorText: _militaryServiceStartDateErrorText,              onChanged: (value) async {                setState(() {                  if (_militaryServiceStartDateFocusNode.hasFocus) {                    _militaryServiceStartDateErrorText =                        ErrorText.getEmptyFieldError(                            name: _militaryServiceStartDateController.text,                            context: context);                  }                });              },              onTap: () async {                /// Clear the error if a date is selected                _militaryServiceStartDateErrorText = null;                /// Define the initial date (e.g., today's date)                final DateTime initialDate = DateTime.now();                /// Define the start date (20 years ago from today)                final DateTime firstDate = DateTime.now().subtract(const Duration(days: 20 * 365));                /// Define the last date (today's date)                final DateTime lastDate = DateTime.now();                DateTime? date = await showDatePicker(                  context: context,                  barrierColor: AppColors.scoButtonColor.withOpacity(0.1),                  barrierDismissible: false,                  locale: Provider.of<LanguageChangeViewModel>(context, listen: false).appLocale,                  initialDate: initialDate,                  firstDate: firstDate,                  lastDate: lastDate,                );                if (date != null) {                  setState(() {                    Utils.requestFocus(                        focusNode: _militaryServiceEndDateFocusNode,                        context: context);                    _militaryServiceStartDateController.text =                        DateFormat('yyyy-MM-dd').format(date).toString();                  });                }              },            ),            /// ****************************************************************************************************************************************************            kFormHeight,            ///  End Date            fieldHeading(title: localization.militaryServiceEndDate, important: true, langProvider: langProvider),            scholarshipFormDateField(              currentFocusNode: _militaryServiceEndDateFocusNode,              controller: _militaryServiceEndDateController,              hintText: localization.militaryServiceEndDateWatermark,              errorText: _militaryServiceEndDateErrorText,              onChanged: (value) async {                setState(() {                  if (_militaryServiceEndDateFocusNode.hasFocus) {                    _militaryServiceEndDateErrorText =                        ErrorText.getEmptyFieldError(                      name: _militaryServiceEndDateController.text,                      context: context,                    );                  }                });              },              onTap: () async {                /// Clear the error if a date is selected                _militaryServiceEndDateErrorText = null;                /// Define the initial date (e.g., today's date)                final DateTime initialDate = DateTime.now();                /// Define the start date (10 years ago from today)                final DateTime firstDate = DateTime.now().subtract(const Duration(days: 10 * 365));                /// Define the last date (10 years in the future from today)                final DateTime lastDate = DateTime.now().add(const Duration(days: 10 * 365));                DateTime? date = await showDatePicker(                  context: context,                  barrierColor: AppColors.scoButtonColor.withOpacity(0.1),                  barrierDismissible: false,                  locale: Provider.of<LanguageChangeViewModel>(context, listen: false).appLocale,                  initialDate: initialDate,                  firstDate: firstDate,                  lastDate: lastDate,                );                if (date != null) {                  setState(() {                    _militaryServiceEndDateController.text =                        DateFormat('yyyy-MM-dd').format(date).toString();                    /// Optionally, request focus on the next field                  });                }              },            ),          ],        );      case MilitaryStatus.no:        return showVoid;      case MilitaryStatus.postponed:        return _reason(langProvider);      case MilitaryStatus.exemption:        return _reason(langProvider);      case null:        return showVoid;    }    return showVoid;  }  /// reason widget which is used as common for both relief and exemption  Widget _reason(langProvider) {    final localization = AppLocalizations.of(context)!;    return Column(      children: [        /// ****************************************************************************************************************************************************        kFormHeight,        fieldHeading(            title: localization.militaryReason, important: true, langProvider: langProvider),        scholarshipFormTextField(            currentFocusNode: _reasonForMilitaryFocusNode,            controller: _reasonForMilitaryController,            maxLines: 3,            hintText: localization.militaryReasonWatermark,            errorText: _reasonForMilitaryErrorText,            onChanged: (value) {              if (_reasonForMilitaryFocusNode.hasFocus) {                setState(() {                  _reasonForMilitaryErrorText =                      ErrorText.getNameArabicEnglishValidationError(                          name: _reasonForMilitaryController.text,                          context: context);                });              }            }),      ],    );  }  /// *--------------------------------------------------------------- Military Information Section end ----------------------------------------------------------------------------*  /// ****************************************************************************************************************************************************        /// ****************************************************************************************************************************************************  /// *--------------------------------------------------------------- High School Section Start ----------------------------------------------------------------------------*  /// step-3: high school details    bool displayHighSchool(){    /// We will show High school details option to UG,UGRD ,SCHL and HCHL scholarship types    final academicCareer = _selectedScholarship?.acadmicCareer;    return (academicCareer == 'UG' ||        academicCareer == 'UGRD' ||        academicCareer == 'SCHL' ||        academicCareer == 'HCHL');  }  /// These are dropdown menus  List _highSchoolLevelMenuItemsList = [];  List _highSchoolTypeMenuItemsList = [];  List _highSchoolSubjectsItemsList = [];  /// final HIGH SCHOOL list final List<HighSchool> _highSchoolList = [];  /// to populate the states based on high school country  _populateHighSchoolStateDropdown(      {required LanguageChangeViewModel langProvider, required int index}) {    setState(() {      if (Constants              .lovCodeMap[                  'STATE#${_highSchoolList[index].hsCountryController.text}']              ?.values !=          null) {        _highSchoolList[index].schoolStateDropdownMenuItems =            populateCommonDataDropdown(                menuItemsList: Constants                    .lovCodeMap[                        'STATE#${_highSchoolList[index].hsCountryController.text}']!                    .values!,                provider: langProvider,                textColor: AppColors.scoButtonColor);      }    });  }  _populateHighSchoolNameDropdown(      {required LanguageChangeViewModel langProvider, required int index}) {    setState(() {      if (Constants              .lovCodeMap[                  'SCHOOL_CD#${_highSchoolList[index].hsStateController.text}']              ?.values !=          null) {        _highSchoolList[index].schoolNameDropdownMenuItems =            populateCommonDataDropdown(                menuItemsList: Constants                    .lovCodeMap[                        'SCHOOL_CD#${_highSchoolList[index].hsStateController.text}']!                    .values!,                provider: langProvider,                textColor: AppColors.scoButtonColor);      }    });  }  _populateHighSchoolCurriculumTypeDropdown(      {required LanguageChangeViewModel langProvider, required int index}) {    setState(() {      if (Constants              .lovCodeMap[                  'CURRICULM_TYPE#${_highSchoolList[index].hsTypeController.text}']              ?.values !=          null) {        _highSchoolList[index].schoolCurriculumTypeDropdownMenuItems =            populateCommonDataDropdown(                menuItemsList: Constants                    .lovCodeMap[                        'CURRICULM_TYPE#${_highSchoolList[index].hsTypeController.text}']!                    .values!,                provider: langProvider,                textColor: AppColors.scoButtonColor);      }    });  }  Widget _highSchoolDetailsSection({required int step, required LanguageChangeViewModel langProvider}) {    return HighSchoolView(highSchoolList: _highSchoolList, admitType: _selectedScholarship!.admitType, academicCareer: _selectedScholarship!.acadmicCareer, draftPrevNextButtons: draftPrevNextButtons(langProvider));  }  /// *--------------------------------------------------------------- High School Section end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- Graduation Details Section start ----------------------------------------------------------------------------*  final List<GraduationInfo> _graduationDetailsList = [];  List<DropdownMenuItem> _graduationLevelMenuItems = [];  List<DropdownMenuItem> _graduationLevelDDSMenuItems = [];  List<DropdownMenuItem> _caseStudyYearDropdownMenuItems = [];  /// sponsorship question for dds (One student can have only have one sponsor)  String havingSponsor = '';  String? _selectSponsorshipErrorText;  void updateHavingSponsor(String value) {    setState(() {      havingSponsor = value;      _selectSponsorshipErrorText = null;    });  }  /// to populate the graduation Details  _populateGraduationLastTermMenuItemsList({required LanguageChangeViewModel langProvider, required int index}) {    setState(() {      if (Constants.lovCodeMap['LAST_TERM']?.values != null) {        _graduationDetailsList[index].lastTerm = populateCommonDataDropdown(            menuItemsList: Constants.lovCodeMap['LAST_TERM']!.values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }    });  }  /// populate menu items list  _populateUniversityMenuItemsList(      {required LanguageChangeViewModel langProvider, required int index})  {    setState(() {      if (Constants              .lovCodeMap[                  'GRAD_UNIVERSITY#${_graduationDetailsList[index].countryController.text}#UNV']              ?.values !=          null) {        _graduationDetailsList[index].university = populateCommonDataDropdown(            menuItemsList: Constants                .lovCodeMap[                    'GRAD_UNIVERSITY#${_graduationDetailsList[index].countryController.text}#UNV']!                .values!,            provider: langProvider,            textColor: AppColors.scoButtonColor);      }    });  }  _addGraduationDetail() {    // bool isAlreadyCurrentlyStudying = _graduationDetailsList.any((element) => element.currentlyStudying == true);    setState(() {      _graduationDetailsList.add(GraduationInfo(        levelController: TextEditingController(),        countryController: TextEditingController(),        universityController: TextEditingController(),        majorController: TextEditingController(),        cgpaController: TextEditingController(),        graduationStartDateController: TextEditingController(),        lastTermController: TextEditingController(),        caseStudyTitleController: TextEditingController(),        caseStudyDescriptionController: TextEditingController(),        caseStudyStartYearController: TextEditingController(),        levelFocusNode: FocusNode(),        countryFocusNode: FocusNode(),        universityFocusNode: FocusNode(),        majorFocusNode: FocusNode(),        cgpaFocusNode: FocusNode(),        graduationStartDateFocusNode: FocusNode(),        lastTermFocusNode: FocusNode(),        caseStudyTitleFocusNode: FocusNode(),        caseStudyDescriptionFocusNode: FocusNode(),        caseStudyStartYearFocusNode: FocusNode(),        isNewController: TextEditingController(),        sponsorShipController: TextEditingController(),        errorMessageController: TextEditingController(),        highestQualification: false,        // showCurrentlyStudying: !isAlreadyCurrentlyStudying,        showCurrentlyStudying: false,        currentlyStudying: false,        lastTerm: [],        graduationLevel: [],        university: [],        otherUniversityController: TextEditingController(),        otherUniversityFocusNode: FocusNode(),        graduationEndDateController: TextEditingController(),        graduationEndDateFocusNode: FocusNode(),        sponsorShipFocusNode: FocusNode(),      ));    });  }  Widget _graduationDetailsSection( {required int step, required LanguageChangeViewModel langProvider}){    return GraduationInformationView(selectSponsorshipErrorText: _selectSponsorshipErrorText,onUpdateHavingSponsor: updateHavingSponsor,graduationDetailsList: _graduationDetailsList,graduationLevelMenuItems: _graduationLevelMenuItems,graduationLevelDDSMenuItems: _graduationLevelDDSMenuItems,caseStudyYearDropdownMenuItems: _caseStudyYearDropdownMenuItems, academicCareer: _selectedScholarship?.acadmicCareer,scholarshipType: _selectedScholarship?.scholarshipType,nationalityMenuItemsList: _nationalityMenuItemsList, displayHighSchool: displayHighSchool(), draftPrevNextButtons: draftPrevNextButtons(langProvider), havingSponsor: havingSponsor, addGraduation: _addGraduationDetail,);  }  /// *--------------------------------------------------------------- Graduation Details Section end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- University And Majors Section Start ----------------------------------------------------------------------------*  /// step-4  /// "acadProgram": "SCO-P",  /// "acadProgramDds": "FELL",  /// "acadProgramPgrd": "MSTRS",  /// controllers, focus nodes and error text variables for Academic program  // final TextEditingController _acadProgramController = TextEditingController();  final TextEditingController _acadProgramDdsController = TextEditingController();  final TextEditingController _acadProgramPgrdController = TextEditingController();  // final FocusNode _acadProgramFocusNode = FocusNode();  final FocusNode _acadProgramDdsFocusNode = FocusNode();  final FocusNode _acadProgramPgrdFocusNode = FocusNode();  String? _acadProgramErrorText;  String? _acadProgramDdsErrorText;  String? _acadProgramPgrdErrorText;  /// list of Academic Program PGRD  List<DropdownMenuItem> _acadProgramPgrdMenuItemsList = [];  /// list of Academic Program DDS  List<DropdownMenuItem> _acadProgramDdsMenuItemsList = [];  List<DropdownMenuItem> getMajors() {    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);    /// Step 1: Check for postgraduate academic career ("PGRD")    if (_selectedScholarship?.acadmicCareer?.toUpperCase() == "PGRD") {      String majorCriteria = "MAJORSPGRD#${_selectedScholarship?.acadmicCareer?.toUpperCase()}#${isStudyCountry ? 'N' : 'Y'}";      return populateCommonDataDropdown(        menuItemsList: Constants.lovCodeMap[majorCriteria]?.values ?? [],        provider: langProvider,      );    }    /// Step 2: Default major criteria for non-PGRD    String majorCriteria = "MAJORS#${_selectedScholarship?.acadmicCareer?.toUpperCase()}#${isStudyCountry ? 'N' : 'Y'}";    List<dynamic> items = Constants.lovCodeMap[majorCriteria]?.values ?? [];    /// Step 3: Check for different admit types    if (_selectedScholarship?.admitType?.toUpperCase() == "ACT") {      /// For "ACT" admit type      majorCriteria = "MAJORSACT#${_selectedScholarship?.acadmicCareer?.toUpperCase()}#${isStudyCountry ? 'N' : 'Y'}";      items = Constants.lovCodeMap[majorCriteria]?.values ?? [];    } else if (_selectedScholarship?.admitType?.toUpperCase() == "NLU") {      /// For "NLU" admit type      majorCriteria = "MAJORSNL#${_selectedScholarship?.acadmicCareer?.toUpperCase()}#${isStudyCountry ? 'N' : 'Y'}";      items = Constants.lovCodeMap[majorCriteria]?.values ?? [];    } else if (_selectedScholarship?.scholarshipType?.toUpperCase() == "INT" && _selectedScholarship?.admitType?.toUpperCase() != "MET") {      /// Handle "INT" admit type with specific filtering for "OTH"      List<dynamic> filteredItems = [];      for (var item in items) {        if (item.code?.toUpperCase() == "OTH") {          if (_isValidAdmitTypeForINT(_selectedScholarship?.admitType,              _selectedScholarship?.configurationKey)) {            filteredItems.add(item);          }        } else {          filteredItems.add(item); /// Add other items directly        }      }      items = filteredItems; /// Update items with filtered items    } else if (_selectedScholarship?.scholarshipType?.toUpperCase() == "EXT") {      /// For "EXT" scholarship type, items already fetched    } else {      /// Default case to only add "BAM" items      List<dynamic> filteredItems = [];      for (var item in items) {        if (item.code?.toUpperCase() == "BAM") {          filteredItems.add(item);        }      }      items = filteredItems; /// Update items with filtered items    }    /// Step 4: Handle special cases    if (_selectedScholarship?.isSpecialCase ?? false) {      items.add({'value': 'OTH', 'label': 'آخر'}); /// Append special case "OTH"    }    /// Return the final list of majors    return populateCommonDataDropdown(        menuItemsList: items, provider: langProvider);  }/// Helper method to validate INT admit type  bool _isValidAdmitTypeForINT(String? admitType, String? configurationKey) {    return ["MOP", "MOS"].contains(admitType?.toUpperCase()) ||        configurationKey?.toUpperCase() == "SCOUGRDINTHH";  }/// major dropdown menu items list  List<DropdownMenuItem> _majorsMenuItemsList = [];  bool isStudyCountry = false;  /// majors wishlist/// Initialize the list  final List<MajorWishList> _majorsWishlist = [];/// Function to add a new MajorWishList item  void addMajorWishList() {    /// Create a new MajorWishList instance    MajorWishList newWishList = MajorWishList(      majorController: TextEditingController(),      otherMajorController: TextEditingController(),      errorMessageController: TextEditingController(),      isNewController: TextEditingController(),      majorFocusNode: FocusNode(),      otherMajorFocusNode: FocusNode(),      errorMessageFocusNode: FocusNode(),      isNewFocusNode: FocusNode(),    );    /// Add the new instance to the list    _majorsWishlist.add(newWishList);  }/// Function to remove a MajorWishList item by index  void removeMajorWishList(int index) {    if (index >= 0 && index < _majorsWishlist.length) {      /// Dispose the controllers and focus nodes to avoid memory leaks      _majorsWishlist[index].majorController.dispose();      _majorsWishlist[index].errorMessageController.dispose();      _majorsWishlist[index].isNewController.dispose();      _majorsWishlist[index].majorFocusNode.dispose();      _majorsWishlist[index].errorMessageFocusNode.dispose();      _majorsWishlist[index].isNewFocusNode.dispose();      /// Remove the item from the list      _majorsWishlist.removeAt(index);    }  }  /// university priority list/// List to store UniversityPriority items final List<UniversityPriority> _universityPriorityList = [];  List<DropdownMenuItem> populateUniversitiesWishList(      UniversityPriority universityInfo)  {    String country = universityInfo.countryIdController.text;    /// Step 1: Fetch initial list of universities based on country    List<DropdownMenuItem> items = fetchListOfValue("UNIVERSITY#$country#UNV");    /// List to store final items    List<DropdownMenuItem> itemsNew = [];    /// Step 2: Handle special case    if (_selectedScholarship?.isSpecialCase ?? false) {      itemsNew.add(const DropdownMenuItem(          value: "OTH", child: Text("آخر"))); /// "OTH" means "Other"    }    /// Step 3: Check for different admit types    if (_selectedScholarship?.admitType?.toUpperCase() == "NLU") {      /// For "NLU" admit type      itemsNew = fetchListOfValue("EXTUNIVERSITYNL#$country#UNV");    } else if (country.toUpperCase() == "GBR") {      /// For country "GBR"      itemsNew.add(const DropdownMenuItem(value: "OTH", child: Text("آخر")));    } else if (country.toUpperCase() != "ARE" && _selectedScholarship?.scholarshipType?.toUpperCase() != "INT") {      /// For countries not equal to "ARE" and scholarship type not "INT"      itemsNew = fetchListOfValue("GRAD_UNIVERSITY#$country#UNV");    } else if (_selectedScholarship?.scholarshipType?.toUpperCase() == "INT" &&        _selectedScholarship?.admitType?.toUpperCase() == "MET") {      /// For "INT" scholarship type with "MET" admit type      for (var item in items) {        if (item.value.toString().toUpperCase() == "00000105") {          itemsNew.add(item);        }      }    } else {      /// Default case, add all items      itemsNew.addAll(items);    }    universityInfo.universityDropdown = itemsNew;    return itemsNew;  }/// Helper function to mimic fetchListOfValue, should return a list of DropdownMenuItem  List<DropdownMenuItem> fetchListOfValue(String key) {    /// Your logic to fetch values goes here    final langProvider = Provider.of<LanguageChangeViewModel>(context, listen: false);    if (Constants.lovCodeMap[key]?.values != null) {      return populateCommonDataDropdown(        menuItemsList: Constants.lovCodeMap[key]!.values!,        provider: langProvider,        textColor: AppColors.scoButtonColor,      );    } else {      /// Handle the case where the values are null (e.g., return an empty list or log an error)      return []; /// or any appropriate fallback    }  }  List<DropdownMenuItem> _universityPriorityStatus = [];/// Function to add a new UniversityPriority item with only countryId provided  void addUniversityPriority() {    /// Create a new UniversityPriority instance with only countryId set    UniversityPriority newPriority = UniversityPriority(      /// countryIdController: TextEditingController(text: _selectedScholarship?.acadmicCareer == 'UGRD' ? "ARE" : ''),      countryIdController: TextEditingController(text: isStudyCountry ? "ARE" : ''),      universityIdController: TextEditingController(),      otherUniversityNameController: TextEditingController(),      majorsController: TextEditingController(),      otherMajorsController: TextEditingController(),      statusController: TextEditingController(),      errorMessageController: TextEditingController(),      isNewController: TextEditingController(text: 'true'),      countryIdFocusNode: FocusNode(),      universityIdFocusNode: FocusNode(),      otherUniversityNameFocusNode: FocusNode(),      majorsFocusNode: FocusNode(),      otherMajorsFocusNode: FocusNode(),      statusFocusNode: FocusNode(),    );    /// Add the new instance to the list    _universityPriorityList.add(newPriority);    populateUniversitiesWishList(newPriority);  }/// Function to remove a UniversityPriority item by index  void removeUniversityPriority(int index) {    if (index >= 0 && index < _universityPriorityList.length) {      /// Dispose the controllers and focus nodes to avoid memory leaks      _universityPriorityList[index].countryIdController.dispose();      _universityPriorityList[index].universityIdController.dispose();      _universityPriorityList[index].otherUniversityNameController.dispose();      _universityPriorityList[index].majorsController.dispose();      _universityPriorityList[index].statusController.dispose();      _universityPriorityList[index].errorMessageController.dispose();      _universityPriorityList[index].isNewController.dispose();      _universityPriorityList[index].countryIdFocusNode.dispose();      _universityPriorityList[index].universityIdFocusNode.dispose();      _universityPriorityList[index].otherUniversityNameFocusNode.dispose();      _universityPriorityList[index].majorsFocusNode.dispose();      _universityPriorityList[index].statusFocusNode.dispose();      /// Remove the item from the list      _universityPriorityList.removeAt(index);    }  }  _universityAndMajorsDetailsSection(      {required int step, required LanguageChangeViewModel langProvider}) {    final localization = AppLocalizations.of(context)!;    return Container(        padding: EdgeInsets.symmetric(horizontal: kPadding),        color: Colors.grey.shade200,        child: SingleChildScrollView(            child: Column(children: [          // draftPrevNextButtons(langProvider),              kSmallSpace,          /// majors          CustomInformationContainer(              title: _selectedScholarship?.acadmicCareer == 'PGRD'                  ? localization.pgrdMajorWishlist                  : localization.majorWishlist,               expandedContent: sectionBackground(child: Column(                   crossAxisAlignment: CrossAxisAlignment.start,                   mainAxisSize: MainAxisSize.min,                   children: [                     /// dropdown for pgrd students academic program                     if(_selectedScholarship?.acadmicCareer == 'PGRD' && _selectedScholarship?.acadmicCareer != 'DDS')                       Column(                         children: [                           fieldHeading(                             title: localization.pgrdAdacProgram,                             important: true,                             langProvider: langProvider,                           ),                           scholarshipFormDropdown(context:context,                             controller: _acadProgramPgrdController,                             currentFocusNode: _acadProgramPgrdFocusNode,                             menuItemsList: _acadProgramPgrdMenuItemsList,                             hintText: localization.select,                             errorText: _acadProgramPgrdErrorText,                             onChanged: (value) {                               _acadProgramPgrdErrorText = null;                               setState(() {                                 _acadProgramPgrdController.text = value!;                               });                             },                           )                         ],                       ),                     kFormHeight,                     /// Select Majors wishlist                     _selectedScholarship?.acadmicCareer != 'DDS'                         ? ListView.builder(                         shrinkWrap: true,                         padding: EdgeInsets.zero,                         physics: const NeverScrollableScrollPhysics(),                         itemCount: _majorsWishlist.length,                         itemBuilder: (context, index) {                           final majorInfo = _majorsWishlist[index];                           return Column(                             children: [                               fieldHeading(                                   title: index == 0                                       ? localization.majorsWish1                                       : index == 1                                       ? localization.majorsWish2                                       : localization.majorsWish3,                                   important: _selectedScholarship?.acadmicCareer != 'DDS' && index == 0,                                   langProvider: langProvider),                               scholarshipFormDropdown(context:context,                                   controller: majorInfo.majorController,                                   currentFocusNode: majorInfo.majorFocusNode,                                   menuItemsList: _majorsMenuItemsList,                                   hintText: localization.select,                                   errorText: majorInfo.majorError,                                   onChanged: (value) {                                     majorInfo.majorError = null;                                     // Check if the major is already selected                                     bool alreadySelected = value.trim().isNotEmpty &&                                         _majorsWishlist.any((info) {                                           return info != majorInfo && info.majorController.text.trim() == value.trim();                                         });                                     if (alreadySelected) {                                       // If the major is already selected, reset the field and show a message                                       setState(() {                                         majorInfo.majorError = localization.duplicateMajorFound;                                         majorInfo.majorController.clear();                                         majorInfo.isNewController.text = "false";                                         // Display a toast message                                         // _alertService.toastMessage("This major has already been selected. Please choose another one.",                                         // );                                       });                                     } else {                                       // If the major is valid, update the field and show a success message                                       setState(() {                                         majorInfo.majorController.text = value!;                                         majorInfo.isNewController.text = "true"; // Mark entry as valid                                         // Optionally, display a success toast                                         // _alertService.toastMessage("Major selected successfully.");                                       });                                     }                                   }                               ),                               kFormHeight,                               /// other major if major is selected as other                               if(_selectedScholarship?.acadmicCareer != 'DDS' && majorInfo.majorController.text == 'OTH')                                 Column(                                   children: [                                     fieldHeading(                                         title: localization.otherMajor,                                         important: _selectedScholarship?.acadmicCareer != 'DDS' && index == 0,                                         langProvider: langProvider),                                     scholarshipFormTextField(currentFocusNode: majorInfo.otherMajorFocusNode, controller: majorInfo.otherMajorController, hintText: localization.otherMajorWatermark,errorText: majorInfo.otherMajorError, onChanged: (value){                                       if(majorInfo.otherMajorFocusNode.hasFocus && _selectedScholarship?.acadmicCareer != 'DDS' && majorInfo.majorController.text == 'OTH'){                                         setState(() {                                           majorInfo.otherMajorError = ErrorText.getEmptyFieldError(name: majorInfo.otherMajorController.text, context: context);                                         });                                       }                                     })                                   ],                                 ),                               // kMinorSpace,                             ],                           );                         })                         : showVoid,                     /// major when academic program is dds                     _selectedScholarship?.acadmicCareer == 'DDS'                         ? Column(                       children: [                         fieldHeading(                           title: localization.ddsMajor1,                           important: true,                           langProvider: langProvider,                         ),                         scholarshipFormDropdown(context:context,                           controller: _acadProgramDdsController,                           currentFocusNode: _acadProgramDdsFocusNode,                           menuItemsList: _acadProgramDdsMenuItemsList,                           hintText: localization.select,                           errorText: _acadProgramDdsErrorText,                           onChanged: (value) {                             _acadProgramDdsErrorText = null;                             setState(() {                               _acadProgramDdsController.text = value!;                             });                           },                         )                       ],                     )                         : showVoid                   ]) )              ),          kFormHeight,         //// *********************************************************************** Majors  WISH LIST SECTION End ***********************************************************************          //// *********************************************************************** UNIVERSITY  WISH LIST SECTION START ***********************************************************************          /// university list        if(_selectedScholarship?.acadmicCareer != 'HCHL')          CustomInformationContainer(              title: _selectedScholarship?.acadmicCareer == 'DDS'                  ? localization.ddsWishlist                  : localization.universityWishList,              expandedContent: sectionBackground(child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  mainAxisSize: MainAxisSize.min,                  children: [                    /// Select Majors wishlist                    if(_selectedScholarship?.acadmicCareer != 'HCHL')                      Column(                        children: [                          ListView.builder(                              shrinkWrap: true,                              padding: EdgeInsets.zero,                              physics: const NeverScrollableScrollPhysics(),                              itemCount: _universityPriorityList.length,                              itemBuilder: (context, index) {                                final universityInfo = _universityPriorityList[index];                                return Column(                                  children: [                                    /// ****************************************************************************************************************************************************                                    fieldHeading(                                        title: localization.country,                                        important: true,                                        langProvider: langProvider),                                    //// Show only united states if applying for INT scholarship therefore we have made it selectable on the basis of study country i.e. INT Scholarship                                    scholarshipFormDropdown(context:context,                                      readOnly: isStudyCountry,                                      filled: true,                                      fillColor: isStudyCountry ? AppColors.lightGrey : Colors.white,                                      controller: universityInfo.countryIdController,                                      currentFocusNode: universityInfo.universityIdFocusNode,                                      menuItemsList: _nationalityMenuItemsList,                                      hintText: localization.countryWatermark,                                      errorText: universityInfo.countryIdError,                                      onChanged: (value) {                                        /// Clear the error initially                                        setState(() {                                          universityInfo.countryIdError = null;                                          /// Set the major value if no duplicates are found                                          universityInfo.countryIdController.text = value!;                                          populateUniversitiesWishList(universityInfo);                                        });                                      },                                    ),                                    /// ********************************************************************                                    kFormHeight,                                    /// major                                    _selectedScholarship?.acadmicCareer != 'DDS'                                        ? Column(                                      children: [                                        fieldHeading(                                            title: localization.majors,                                            important: false,                                            langProvider: langProvider),                                        scholarshipFormDropdown(context:context,                                          controller: universityInfo.majorsController,                                          currentFocusNode: universityInfo.majorsFocusNode,                                          menuItemsList: _majorsMenuItemsList,                                          hintText: localization.select,                                          errorText: universityInfo.majorsError,                                          onChanged: (value) {                                            /// Clear the error initially                                            setState(() {                                              universityInfo.majorsError = null;                                              /// /// Check if the selected major is already in the wishlist                                              /// bool alreadySelected =                                              /// _universityPriorityList.any((info) {                                              ///   /// Make sure we're not checking against the current item and compare the selected value                                              ///   return info != universityInfo &&                                              ///       info.majorsController.text ==                                              ///           value;                                              /// });                                              ///                                              /// if (alreadySelected) {                                              ///   /// If the major is already selected, show a toast message and set an error                                              ///   _alertService.showToast(                                              ///     context: context,                                              ///     message:                                              ///     "This  has already been selected. Please choose another one.",                                              ///   );                                              ///   universityInfo.majorsError =                                              ///   "Please choose another";                                              ///                                              ///   /// Clear the selected major value in the controller                                              ///   universityInfo.majorsController                                              ///       .clear();                                              ///   universityInfo.isNewController.text =                                              ///   "false"; /// Reset to indicate it's not a valid entry                                              /// } else {                                              /// Set the major value if no duplicates are found                                              universityInfo                                                  .majorsController                                                  .text = value!;                                              /// }                                            });                                          },                                        ),                                      ],                                    )                                        : showVoid,                                    /// ****************************************************************************************************************************************************                                    kFormHeight,                                    if(universityInfo.majorsController.text == 'OTH' || _selectedScholarship?.acadmicCareer == 'DDS')                                      Column(                                        children: [                                          fieldHeading(                                              title: _selectedScholarship?.acadmicCareer != 'DDS' ? localization.otherMajor : localization.ddsMajor,                                              important: _selectedScholarship?.acadmicCareer != 'DDS' && universityInfo.majorsController.text == 'OTH' && (universityInfo.countryIdController.text.isNotEmpty || universityInfo.otherMajorsController.text.isNotEmpty || universityInfo.otherUniversityNameController.text.isNotEmpty || universityInfo.statusController.text.isNotEmpty),                                              langProvider: langProvider),                                          scholarshipFormTextField(                                              currentFocusNode: universityInfo.otherMajorsFocusNode,                                              nextFocusNode: universityInfo.universityIdFocusNode,                                              controller: universityInfo.otherMajorsController,                                              hintText: _selectedScholarship?.acadmicCareer != 'DDS' ? localization.otherMajorWatermark : localization.ddsMajorWatermark,                                              maxLength: 30,                                              errorText: universityInfo.otherMajorsError,                                              onChanged: (value) {                                              if (universityInfo.otherMajorsFocusNode.hasFocus) {                                                setState(() {                                                  universityInfo.otherMajorsError = _selectedScholarship?.acadmicCareer != 'DDS' && universityInfo.majorsController.text == 'OTH' && (universityInfo.countryIdController.text.isNotEmpty || universityInfo.otherMajorsController.text.isNotEmpty || universityInfo.otherUniversityNameController.text.isNotEmpty || universityInfo.statusController.text.isNotEmpty)                                                      ? ErrorText.getEmptyFieldError(name: universityInfo.otherMajorsController.text, context: context)                                                      : null;                                                });                                              }                                              }),                                          // kFormHeight,                                        ],                                      ),                                    /// ****************************************************************************************************************************************************                                    _selectedScholarship?.acadmicCareer != "DDS"                                        ? Column(                                      children: [                                        fieldHeading(                                            title: localization.university,                                            important: false,                                            langProvider: langProvider),                                        scholarshipFormDropdown(context:context,                                          controller: universityInfo.universityIdController,                                          currentFocusNode: universityInfo.majorsFocusNode,                                          menuItemsList: universityInfo.universityDropdown ?? [],                                          hintText: localization.select,                                          errorText: universityInfo.universityIdError,                                          onChanged: (value) {                                            /// Clear the error initially                                            setState(() {                                              universityInfo.universityIdError = null;                                              /// Check if the selected university is already in the wishlist                                              bool alreadySelected = _universityPriorityList.any((info) {                                                /// Skip the current item, and ensure the selected value is not empty or "OTH"                                                return info != universityInfo &&                                                    info.universityIdController.text.trim().isNotEmpty &&                                                    info.universityIdController.text.trim() != "OTH" &&                                                    info.universityIdController.text.trim() == value?.trim();                                              });                                              if (alreadySelected) {                                                /// If the university is already selected, show a toast message and set an error                                                _alertService.showToast(                                                  // context: context,                                                  message: "This university has already been selected. Please choose another one.",                                                );                                                universityInfo.universityIdError = localization.duplicateWishUniversity;                                                /// Clear the selected university value in the controller                                                universityInfo.universityIdController.clear();                                              } else {                                                /// Set the university value if no duplicates are found                                                universityInfo.universityIdController.text = value!;                                              }                                              // universityInfo.universityIdController.text = value!;                                            });                                          },                                        ),                                      ],                                    )                                        : showVoid,                                    /// ****************************************************************************************************************************************************                                    kFormHeight,                                    // universityInfo.universityIdController.text == 'OTH' || _selectedScholarship?.acadmicCareer == 'DDS'                                    ( universityInfo.universityIdController.text == 'OTH' ||  _selectedScholarship?.acadmicCareer == 'DDS')                                        ? Column(                                      children: [                                        fieldHeading(                                            title: _selectedScholarship?.acadmicCareer != 'DDS'                                                ? localization.universityNameIfOther                                                : localization.ddsUniversity,                                            important: (_selectedScholarship?.acadmicCareer != 'DDS' && universityInfo.universityIdController.text ==                                                'OTH' &&                                                (universityInfo                                                    .countryIdController                                                    .text                                                    .isNotEmpty ||                                                    universityInfo                                                        .otherMajorsController                                                        .text                                                        .isNotEmpty ||                                                    universityInfo                                                        .otherUniversityNameController                                                        .text                                                        .isNotEmpty ||                                                    universityInfo                                                        .statusController                                                        .text                                                        .isNotEmpty)),                                            langProvider: langProvider),                                        scholarshipFormTextField(                                            currentFocusNode: universityInfo                                                .otherUniversityNameFocusNode,                                            nextFocusNode: universityInfo                                                .statusFocusNode,                                            controller: universityInfo                                                .otherUniversityNameController,                                            hintText: _selectedScholarship?.acadmicCareer != 'DDS'                                                ? localization.hsOtherUniversityWatermark                                                : localization.ddsUniversityWatermark,                                            errorText: universityInfo                                                .otherUniversityNameError,                                            onChanged: (value) {                                              if (universityInfo                                                  .otherUniversityNameFocusNode                                                  .hasFocus) {                                                setState(() {                                                  universityInfo.otherUniversityNameError = (_selectedScholarship                                                      ?.acadmicCareer !=                                                      'DDS' &&                                                      universityInfo                                                          .universityIdController                                                          .text ==                                                          'OTH' &&                                                      (universityInfo                                                          .countryIdController                                                          .text                                                          .isNotEmpty ||                                                          universityInfo                                                              .otherMajorsController                                                              .text                                                              .isNotEmpty ||                                                          universityInfo                                                              .otherUniversityNameController                                                              .text                                                              .isNotEmpty ||                                                          universityInfo                                                              .statusController                                                              .text                                                              .isNotEmpty))                                                      ? ErrorText.getEmptyFieldError(                                                      name: universityInfo                                                          .otherUniversityNameController                                                          .text,                                                      context: context)                                                      : null;                                                });                                              }                                            }),                                        kFormHeight,                                      ],                                    )                                        : showVoid,                                    /// ****************************************************************************************************************************************************                                    /// University Status                                    /// kFormHeight,                                    fieldHeading(                                        title: localization.universityStatus,                                        important: _selectedScholarship                                            ?.acadmicCareer !=                                            'DDS' &&                                            (universityInfo.countryIdController                                                .text.isNotEmpty ||                                                universityInfo.otherMajorsController                                                    .text.isNotEmpty ||                                                universityInfo                                                    .otherUniversityNameController                                                    .text                                                    .isNotEmpty ||                                                universityInfo.statusController                                                    .text.isNotEmpty),                                        langProvider: langProvider),                                    scholarshipFormDropdown(context:context,                                      controller: universityInfo.statusController,                                      currentFocusNode: universityInfo.statusFocusNode,                                      menuItemsList: _universityPriorityStatus,                                      hintText: localization.universityStatusWatermark,                                      errorText: universityInfo.statusError,                                      onChanged: (value) {                                        /// Clear the error initially                                        universityInfo.statusError = null;                                        setState(() {                                          universityInfo.statusController.text = value!;                                        });                                      },                                    ),                                    index != 0                                        ? addRemoveMoreSection(                                        title: localization.deleteRowUniversity,                                        add: false,                                        onChanged: () {                                          setState(() {                                            removeUniversityPriority(index);                                          });                                        })                                        : showVoid,                                    kFormHeight,                                    const Divider(),                                    kFormHeight,                                  ],                                );                              }),                          addRemoveMoreSection(                              title: localization.addRowUniversity,                              add: true,                              onChanged: () {                                setState(() {                                  addUniversityPriority();                                });                              }),                        ],                      )                  ]))),          const SizedBox(height: 100,),          // draftPrevNextButtons(langProvider)        ])));  }  /// *--------------------------------------------------------------- University And Majors Section end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- Required Examinations start ----------------------------------------------------------------------------*  /// step-5  final List<RequiredExaminations> _requiredExaminationList = [];  List<DropdownMenuItem>? _requiredExaminationDropdownMenuItems = [];  /// get examination type  _populateExaminationTypeDropdown(      {required LanguageChangeViewModel langProvider, required int index}) {    setState(() {      if (Constants              .lovCodeMap[                  'EXAMINATION_TYPE#${_requiredExaminationList[index].examinationController.text}']              ?.values !=          null) {        _requiredExaminationList[index].examinationTypeDropdown =            populateCommonDataDropdown(                menuItemsList: Constants                    .lovCodeMap[                        'EXAMINATION_TYPE#${_requiredExaminationList[index].examinationController.text}']!                    .values!,                provider: langProvider,                textColor: AppColors.scoButtonColor);      }    });  }  /// get min score and max score just fetching the elements from the lov and based on exam and exam type selection we will find min and max score and set that to the fields  List _testScoreVal = [];/// function to add examination from list  _addRequiredExamination() {    setState(() {      _requiredExaminationList.add(RequiredExaminations(        examinationController: TextEditingController(),        examinationTypeIdController: TextEditingController(),        examinationGradeController: TextEditingController(),        minScoreController: TextEditingController(),        maxScoreController: TextEditingController(),        examDateController: TextEditingController(),        isNewController: TextEditingController(text: "true"),        errorMessageController: TextEditingController(),        examinationFocusNode: FocusNode(),        examinationTypeIdFocusNode: FocusNode(),        examinationGradeFocusNode: FocusNode(),        minScoreFocusNode: FocusNode(),        maxScoreFocusNode: FocusNode(),        examDateFocusNode: FocusNode(),        examinationTypeDropdown: [],      ));    });  }  /// Section for Required Examinations  Widget _requiredExaminationsDetailsSection(      {required int step, required LanguageChangeViewModel langProvider}) {    return RequiredExaminationsView(        draftPrevNextButtons: draftPrevNextButtons(langProvider),        acadmicCareer: _selectedScholarship?.acadmicCareer,        requiredExaminationList: _requiredExaminationList,        requiredExaminationDropdownMenuItems: _requiredExaminationDropdownMenuItems,        testScoreVal: _testScoreVal,    );  }  /// *--------------------------------------------------------------- Required Examinations end ----------------------------------------------------------------------------*  /// *--------------------------------------------------------------- Employment history section start ----------------------------------------------------------------------------*  /// step-6/// function to check weather to display employment history or not  bool displayEmploymentHistory() {    final key = _selectedScholarship?.configurationKey;    return shouldShowEmploymentHistory(key);  }  /// available employment status from lov  List _employmentStatusItemsList = [];  /// current Employment status  String? _employmentStatus;  String? _selectEmploymentHistoryErrorText;  /// employment history list final List<EmploymentHistory> _employmentHistoryList = [];  /// add employment history  void _addEmploymentHistory() {    setState(() {      _employmentHistoryList.add(EmploymentHistory(        employerNameController: TextEditingController(),        designationController: TextEditingController(),        startDateController: TextEditingController(),        endDateController: TextEditingController(),        occupationController: TextEditingController(),        titleController: TextEditingController(),        placeController: TextEditingController(),        reportingManagerController: TextEditingController(),        contactNumberController: TextEditingController(),        contactEmailController: TextEditingController(),        isNewController: TextEditingController(),        errorMessageController: TextEditingController(),        employerNameFocusNode: FocusNode(),        designationFocusNode: FocusNode(),        startDateFocusNode: FocusNode(),        endDateFocusNode: FocusNode(),        occupationFocusNode: FocusNode(),        titleFocusNode: FocusNode(),        placeFocusNode: FocusNode(),        reportingManagerFocusNode: FocusNode(),        contactNumberFocusNode: FocusNode(),        contactEmailFocusNode: FocusNode(),      ));    });  }  Widget _employmentHistoryDetailsSection(      {required int step, required LanguageChangeViewModel langProvider}) {    return EmploymentHistoryView(      selectEmploymentHistoryErrorText: _selectEmploymentHistoryErrorText,      onEmploymentStatusChanged: (value) {      setState(() {        _employmentStatus = value;        if (_employmentStatus == 'N') {          _employmentHistoryList.clear();        }        // if (_employmentHistoryList.isEmpty) {        //   _addEmploymentHistory();        // }        else {          _employmentHistoryList.clear();          _addEmploymentHistory();        }        _selectEmploymentHistoryErrorText = null;      });    },      employmentHistoryList: _employmentHistoryList,      employmentStatus: _employmentStatus,      employmentStatusItemsList: _employmentStatusItemsList,      draftPrevNextButtons: draftPrevNextButtons(langProvider),    );  }  /// *--------------------------------------------------------- Employment History Section Section end ------------------------------------------------------------------------------*  /// *--------------------------------------------------------- Attachments Section start ------------------------------------------------------------------------------*  /// step-7  /// List of Attachments:  List _attachmentsList = [];  final List<Attachment> _myAttachmentsList = [];  /// Determine required conditions for each nationality type  bool shouldShowAttachment(Attachment attachment) {    if (_passportNationalityController.text == 'ARE' && (_isMotherUAECheckbox == false) ) {      return attachment.requiredController.text == 'MRL' || attachment.requiredController.text == 'OPL';    }    else if (_passportNationalityController.text != 'ARE' && (_isMotherUAECheckbox == false)) {      return attachment.requiredController.text == 'NMRL' || attachment.requiredController.text == 'NOPL';    }    else if (_passportNationalityController.text != 'ARE' && _isMotherUAECheckbox) {      return attachment.requiredController.text == 'XMRL' || attachment.requiredController.text == 'XOPL';    }    return false;  }  /// Create clean lists for valid attachments  final List<Values> _filteredAttachmentsList = []; /// These are lov values  final List<Attachment> _filteredMyAttachmentsList = [];  void filterAttachments() {    _filteredAttachmentsList.clear();    _filteredMyAttachmentsList.clear();    for (int i = 0; i < _myAttachmentsList.length; i++) {      final attachment = _attachmentsList[i];      final myAttachment = _myAttachmentsList[i];      // Check the condition and filter accordingly      // print("isStudyCountry: ${isStudyCountry}");      if ( isStudyCountry ) {        if(shouldShowAttachment(myAttachment)){          _filteredAttachmentsList.add(attachment); // Add to filtered list          _filteredMyAttachmentsList.add(myAttachment); //Add corresponding myAttachment        }      }      /// Skip all the rules if the scholarship type is EXt      if(!isStudyCountry){        _filteredAttachmentsList.add(attachment); // Add to filtered list        _filteredMyAttachmentsList.add(myAttachment); // Add corresponding myAttachment      }    }  }  Widget _attachmentsSection(      {required int step, required LanguageChangeViewModel langProvider}) {  final localization = AppLocalizations.of(context)!;    // Filter the lists before building the UI    filterAttachments();    // print(_filteredAttachmentsList.length);    return Container(        padding: EdgeInsets.symmetric(horizontal: kPadding),        color: Colors.grey.shade200,        child: SingleChildScrollView(            child: Column(children: [              // draftPrevNextButtons(langProvider),              kSmallSpace,              CustomInformationContainer(                  title: localization.attachments,                  expandedContent: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      mainAxisSize: MainAxisSize.min,                      children: [                        // Use the filtered lists for the ListView                        sectionBackground(child: ListView.builder(                          shrinkWrap: true,                          physics: const NeverScrollableScrollPhysics(),                          itemCount: _filteredMyAttachmentsList.length, // Use filtered length                          itemBuilder: (context, index) {                            // final attachment = _filteredAttachmentsList[index]; // From filtered list                            final myAttachment = _filteredMyAttachmentsList[index]; // From filtered list                            File? file;                            return Consumer<AttachFileViewmodel>(                              builder: (context, provider, _) {                                return AttachFile(                                  attachmentNumber: index+1,                                  selectedCheckListCode: _selectedCheckListCode ?? '',                                  // attachment: attachment, // Use the filtered attachment                                  myAttachment: myAttachment, // Use the filtered myAttachment                                  onAction: () {                                    // Reset file and clear fields                                    setState(() {                                      myAttachment.userFileNameController.text = "";                                      myAttachment.base64StringController.text = "";                                      myAttachment.commentController.text = '';                                      myAttachment.descriptionController.text = '';                                      file = null;                                    });                                  },                                  onPressed: () async {                                    // Check permission before picking file                                    // final permitted = await _permissionServices.checkAndRequestPermission(Platform.isIOS ? Permission.storage :  Permission.manageExternalStorage, context);                                    if (true) {                                      // Define allowed extensions based on document code                                      final allowedExtensions = myAttachment.documentCdController.text.toUpperCase() == 'SEL006' ? ['jpg', 'jpeg'] : ['pdf'];                                      // set allowed extensions                                      myAttachment.supportedFileTypeController.text = myAttachment.documentCdController.text.toUpperCase() == 'SEL006' ? ".jpeg|.jpg|.JPEG|.JPG" : ".pdf|.PDF";                                      /// set File Type (fir photo 1 and for pdf its 2)                                      myAttachment.supportedFileTypeController.text = myAttachment.supportedFileTypeController.text.toUpperCase() == ".jpeg|.jpg|.JPEG|.JPG" ? "1" : "2";                                      file = await _mediaServices.getSingleFileFromPicker(allowedExtensions: allowedExtensions);                                      if (file != null) {                                        setProcessingMode(status: true);                                        // Update filename and base64 content before asynchronous work                                        myAttachment.userFileNameController.text = file!.path.split('/').last;                                        myAttachment.base64StringController.text =  base64Encode(file!.readAsBytesSync());                                        myAttachment.applictantIdController.text = draftId.toString();                                        myAttachment.applicationDetailIdController.text = draftId.toString();                                        myAttachment.emiratesIdController.text = _emiratesIdController.text;                                        // Perform asynchronous work outside of setState                                        final result = await provider.attachFile(file: myAttachment.toJson());                                        if (result) {                                          // On success, don't send base64String in draft, just send it empty                                          myAttachment.fileUploadedController.text = 'true';                                          myAttachment.base64StringController.clear();                                        }                                        // Synchronously update the UI state after async work completes                                        setState(() {                                          setProcessingMode(status: false);                                          if (!result) {                                            // Reset file and clear fields if attachFile fails                                            myAttachment.userFileNameController.text = "";                                            myAttachment.base64StringController.text = "";                                            myAttachment.commentController.text = '';                                            myAttachment.fileUploadedController.text = 'false';                                            file = null;                                          }                                        });                                      }                                    }                                  },                                );                              },                            );                          },                        ),)                      ])),              const SizedBox(height: 100,),              // draftPrevNextButtons(langProvider)            ])));  }  /// *--------------------------------------------------------- Attachments Section end ------------------------------------------------------------------------------*  bool _iAgreeTerms = false;  String? _iAgreeErrorText;   bool _applicationSubmitted = false;  dynamic _applicationNumber;  Widget _confirmation()  {    final localization = AppLocalizations.of(context)!;    final langProvider = Provider.of<LanguageChangeViewModel>(context,listen: false);    return Container(      decoration: BoxDecoration(        color: AppColors.lightGrey,        borderRadius: BorderRadius.circular(5),      ),      child: Padding(        padding:  EdgeInsets.all(kPadding),        child: Column(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [         // if(!_applicationSubmitted)  draftPrevNextButtons(langProvider),            CustomInformationContainer(title: localization.submissionConfirmation ,          expandedContent: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            kFormHeight,            CustomGFCheckbox(value: _iAgreeTerms, onChanged: (value){              setState(() {                _iAgreeTerms = value ?? false;              });            }, text: localization.submissionAgree) ,            showErrorText(_iAgreeErrorText),            kFormHeight,            // Padding(            //   padding: const EdgeInsets.symmetric(horizontal: 50),            //   child: CustomButton(buttonName: localization.print, isLoading: false, textDirection: getTextDirection(langProvider), onTap: (){            //     _alertService.toastMessage(localization.comingSoon);            //   },            //     buttonColor: AppColors.scoThemeColor,            //     borderColor: Colors.transparent),            // ),            // kFormHeight,            kFormHeight,          ],        ),          ),            showVoid,            // if(!_applicationSubmitted)  draftPrevNextButtons(langProvider),          ]),      ));  }  /// *--------------------------------------------------------- validate section in accordance with the steps start ------------------------------------------------------------------------------*  /// *--------------------------------------------------------- validate section in accordance with the steps start ------------------------------------------------------------------------------*  /// if section is already fulfilling the requirements then move forward to next step:  Future<bool> validateSection(      {required int step, required LanguageChangeViewModel langProvider}) async  {    String academicCareer = _selectedScholarship?.acadmicCareer ?? '';    String key = _selectedScholarship?.configurationKey ?? '';    /// Helper functions for specific validations    // bool shouldShowHighSchoolDetails() {    //   return acadmicCareer == 'UG' ||    //       acadmicCareer == 'UGRD' ||    //       acadmicCareer == 'SCHL' ||    //       acadmicCareer == 'HCHL';    // }    // bool isUniversityAndMajorsRequired() {    //   return academicCareer != 'SCHL';    // }    // bool isRequiredExaminationDetailsRequired() {    //   return !(academicCareer == 'SCHL' || academicCareer == 'HCHL');    // }    // bool isAttachmentSectionForExt() {    //   return key == 'SCOUPPEXT';    // }    // bool shouldDisplayEmploymentHistory() {    //   return displayEmploymentHistory();    // }    /// Switch case for validation based on step    switch (step) {      case 0:        // print("Inside case 1");        return await validateStudentDetailsSection(langProvider);      case 1:        // print("Inside case 2");        if (shouldShowHighSchoolDetails(academicCareer)) {          if (!await validateHighSchoolDetails(langProvider)) return false;        }        return await validateGraduationDetails(langProvider);      case 2:        // print("Inside case 3");        if (shouldShowUniversityAndMajors(academicCareer)) {          return validateUniversityAndMajorsDetails(langProvider);        }        return true;      case 3:        // print("Inside case 4");        if (shouldShowAttachmentSectionForExt(configurationKey: key)) {          return await validateAttachmentsSection(langProvider); /// Validation for SCOUPPEXT at step 4        } else if (shouldShowRequiredExaminations(academicCareer)) {          return await validateRequiredExaminations(langProvider);        }        return true;      case 4:        // print("Inside case 5");        if (academicCareer == 'UGRD') {          return await validateAttachmentsSection(langProvider); /// Validation for UGRD at step 5        } else if(shouldShowAttachmentSectionForExt(configurationKey: key)){          return validateStudentConfirmationSection(langProvider);        }        else if (shouldShowEmploymentHistory(key)) {          return await validateEmploymentHistory(langProvider);        }        return true;      case 5:        // print("Inside case 6");        if (academicCareer == 'UGRD') {          return validateStudentConfirmationSection(langProvider);        }        else if(shouldShowAttachmentSectionForExt(configurationKey: key)){          return validateStudentUndertakingSection(langProvider);        }          return await  validateAttachmentsSection(langProvider); /// Final confirmation for attachments if applicable      case 6:        if(academicCareer == 'UGRD'){          return validateStudentUndertakingSection(langProvider);        } else{          return validateStudentConfirmationSection(langProvider);        }        return true; /// No validation required for confirmation      case 7:      // print("Inside case 0");        return validateStudentUndertakingSection(langProvider);      default:        return true;    }  }  /// To request focus where field needs to adjust:  FocusNode? firstErrorFocusNode;  /// Step 0: Validate "Accept Student Undertaking" section  bool validateStudentUndertakingSection(langProvider) {    firstErrorFocusNode = null;    _acceptStudentUndertakingErrorText = null;    /// Add validation logic for student details    if (!_acceptStudentUndertaking) {      // _alertService.flushBarErrorMessages(      //     message:  AppLocalizations.of(context)!.acceptTermsAndConditions,      //     // context: context,      //     provider: langProvider);      _acceptStudentUndertakingErrorText = AppLocalizations.of(context)!.studentUndertakingRequired;      setState(() {});      // _alertService.showErrorSnackBar(AppLocalizations.of(context)!.studentUndertakingRequired);      return false;    }    // _alertService.showToast(message: "message");    // ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Accept")));    return true;  }  bool validateStudentConfirmationSection(langProvider) {    firstErrorFocusNode = null;    _iAgreeErrorText = null;    /// Add validation logic for student details    if (!_iAgreeTerms) {      // _alertService.flushBarErrorMessages(      //     message:  AppLocalizations.of(context)!.acceptTermsAndConditions,      //     // context: context,      //     provider: langProvider);      // _alertService.showErrorSnackBar(AppLocalizations.of(context)!.submissionAgreeRequired);      _iAgreeErrorText = AppLocalizations.of(context)!.submissionAgreeRequired;      return false;    }    // _alertService.showToast(message: "message");    // ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Accept")));    return true;  }  Future<bool> validateStudentDetailsSection(langProvider)async {final localization = AppLocalizations.of(context)!;    firstErrorFocusNode = null;    /// Validate Arabic Name fields    if (_arabicName.studentNameController.text.isEmpty || !Validations.isArabicNameValid(_arabicName.studentNameController.text)) {      setState(() {        _arabicName.studentNameError = localization.studentNameArabicValidate;        firstErrorFocusNode ??= _arabicName.studentNameFocusNode; /// Set firstErrorFocusNode if it's null      });    }    if (_arabicName.fatherNameController.text.isEmpty ||        !Validations.isArabicNameValid(_arabicName.fatherNameController.text)) {      setState(() {        _arabicName.fatherNameError = localization.fatherNameArabicValidate;        firstErrorFocusNode ??=            _arabicName.fatherNameFocusNode; /// Set firstErrorFocusNode if it's null      });    }    if (_arabicName.grandFatherNameController.text.isEmpty ||        !Validations.isArabicNameValid(_arabicName.grandFatherNameController.text)) {      setState(() {        _arabicName.grandFatherNameError = localization.grandfatherNameArabicValidate;        firstErrorFocusNode ??= _arabicName.grandFatherNameFocusNode;      });    }    if (_arabicName.familyNameController.text.isEmpty ||        !Validations.isArabicNameValid(_arabicName.familyNameController.text)) {      setState(() {        _arabicName.familyNameError = localization.familyNameArabicValidate;        firstErrorFocusNode ??= _arabicName.familyNameFocusNode;      });    }    /// Validate English Name fields    if (_englishName.studentNameController.text.isEmpty ||        !Validations.isEnglishNameValid(_englishName.studentNameController.text)) {      setState(() {        _englishName.studentNameError = localization.studentNameEnglishValidate;        firstErrorFocusNode ??= _englishName.studentNameFocusNode;      });    }    if (_englishName.fatherNameController.text.isEmpty ||        !Validations.isEnglishNameValid(_englishName.fatherNameController.text)) {      setState(() {        _englishName.fatherNameError = localization.fatherNameEnglishValidate;        firstErrorFocusNode ??= _englishName.fatherNameFocusNode;      });    }    if (_englishName.grandFatherNameController.text.isEmpty ||        !Validations.isEnglishNameValid(            _englishName.grandFatherNameController.text)) {      setState(() {        _englishName.grandFatherNameError = localization.grandfatherNameEnglishValidate;        firstErrorFocusNode ??= _englishName.grandFatherNameFocusNode;      });    }    if (_englishName.familyNameController.text.isEmpty ||        !Validations.isEnglishNameValid(_englishName.familyNameController.text)) {      setState(() {        _englishName.familyNameError = localization.familyNameEnglishValidate;        firstErrorFocusNode ??= _englishName.familyNameFocusNode;      });    }    /// passport data validation start    if (_passportNationalityController.text.isEmpty) {      setState(() {        _passportNationalityError = localization.nationalityRequired;        firstErrorFocusNode ??= _passportNationalityFocusNode;      });    }    if (_passportNumberController.text.isEmpty) {      setState(() {        _passportNumberError = localization.passportNumberValidate;        firstErrorFocusNode ??= _passportNumberFocusNode;      });    }    if (_passportIssueDateController.text.isEmpty) {      setState(() {        _passportIssueDateError = localization.passportIssueDateValidate;        firstErrorFocusNode ??= _passportIssueDateFocusNode;      });    }    if (_passportExpiryDateController.text.isEmpty) {      setState(() {        _passportExpiryDateError = localization.passportExpireDateValidate;        firstErrorFocusNode ??= _passportExpiryDateFocusNode;      });    }    if(_passportIssueDateController.text == _passportExpiryDateController.text ){      setState(() {        _passportExpiryDateError = "${localization.passportExpireDateValidate}\nStart and End Date cannot be same";        firstErrorFocusNode ??= _passportExpiryDateFocusNode;      });    }    if (_passportPlaceOfIssueController.text.isEmpty) {      setState(() {        _passportPlaceOfIssueError = localization.passportIssueDateValidate;        firstErrorFocusNode ??= _passportPlaceOfIssueFocusNode;      });    }    // if( _selectedScholarship?.admitType != 'INT' ){    //   if (_passportUnifiedNoController.text.isNotEmpty && !Validations.isUnifiedNumberValid(_passportUnifiedNoController.text)) {    //     setState(() {    //       _passportUnifiedNoError = AppLocalizations.of(context)!.unifiedNumberRequired;    //       firstErrorFocusNode ??= _passportUnifiedNoFocusNode;    //     });    //   }    // }    /// personal details validation    /// student profile provider for fetching pre-filling student details and verify that emirate id and email matches the profile    final studentProfileProvider = Provider.of<GetPersonalDetailsViewModel>(context, listen: false);    if (_emiratesIdController.text.isEmpty|| _emiratesIdController.text.replaceAll('-', '') != studentProfileProvider.apiResponse.data?.data?.user?.emirateId?.replaceAll('-', '') ) {      setState(() {        _emiratesIdError = localization.emiratesIdValidate;        firstErrorFocusNode ??= _emiratesIdFocusNode;      });    }    if (_emiratesIdExpiryDateController.text.isEmpty) {      setState(() {        _emiratesIdExpiryDateError = localization.emirateidExpiryDateRequired;        firstErrorFocusNode ??= _emiratesIdExpiryDateFocusNode;      });    }    if (_dateOfBirthController.text.isEmpty) {      setState(() {        _dateOfBirthError = localization.brithDateValidate;        firstErrorFocusNode ??= _dateOfBirthFocusNode;      });    }    if(!isFourteenYearsOld(_dateOfBirthController.text)){      setState(() {        _dateOfBirthError = localization.brithDateValidate;        firstErrorFocusNode ??= _dateOfBirthFocusNode;      });    }    if (_placeOfBirthController.text.isEmpty) {      setState(() {        _placeOfBirthError = localization.birthPlaceValidate;        firstErrorFocusNode ??= _placeOfBirthFocusNode;      });    }    if (_genderController.text.isEmpty) {      setState(() {        _genderError = localization.genderValidate;        firstErrorFocusNode ??= _genderFocusNode;      });    }    if (_maritalStatusController.text.isEmpty) {      setState(() {        _maritalStatusError = localization.maritalStatusValidate;        firstErrorFocusNode ??= _maritalStatusFocusNode;      });    }    if (_studentEmailController.text.isEmpty || _studentEmailController.text != studentProfileProvider.apiResponse.data?.data?.user?.emailAddress  ) {      setState(() {        // _studentEmailError = 'Please enter your student email.\nYour email address must match with profile email address.';        _studentEmailError = localization.emailNotMatch;        firstErrorFocusNode ??= _studentEmailFocusNode;      });    }    ///validate the family information    if (_passportNationalityController.text == "ARE") {      if (_familyInformationEmiratesController.text.isEmpty) {        setState(() {          _familyInformationEmiratesErrorText = localization.emiratesValidate;          firstErrorFocusNode ??= _familyInformationEmiratesFocusNode;        });      }      if (_familyInformationTownVillageNoController.text.isEmpty) {        setState(() {          _familyInformationTownVillageNoErrorText = localization.numberOfTownValidate;          firstErrorFocusNode ??= _familyInformationTownVillageNoFocusNode;        });      }      if (_familyInformationParentGuardianNameController.text.isEmpty) {        setState(() {          _familyInformationParentGuardianNameErrorText = localization.parentNameValidate;          firstErrorFocusNode ??= _familyInformationParentGuardianNameFocusNode;        });      }      if (_familyInformationRelationTypeController.text.isEmpty) {        setState(() {          _familyInformationRelationTypeErrorText = localization.relationTypeValidate;          firstErrorFocusNode ??= _familyInformationRelationTypeFocusNode;        });      }      if (_familyInformationMotherNameController.text.isEmpty) {        setState(() {          _familyInformationMotherNameErrorText = localization.motherNameValidate;          firstErrorFocusNode ??= _familyInformationMotherNameFocusNode;        });      }    }    /// validate the Relative information  _isRelativeStudyingFromScholarshipErrorText = null;  if (_isRelativeStudyingFromScholarship == null) {      setState(() {        firstErrorFocusNode ??= _isRelativeStudyingFromScholarshipYesFocusNode;        _isRelativeStudyingFromScholarshipErrorText = AppLocalizations.of(context)!.relativesStudyingScholarshipRequired;        // _alertService.showToast(message: AppLocalizations.of(context)!.relativesStudyingScholarshipRequired);      });    }    if (_relativeInfoList.isNotEmpty && _isRelativeStudyingFromScholarship != null) {      for (var element in _relativeInfoList) {        if (element.relativeNameController.text.isEmpty) {          setState(() {            element.relativeNameError = localization.relativeNameValidate;            firstErrorFocusNode ??= element.relationTypeFocusNode;          });        }        if (element.relationTypeController.text.isEmpty) {          setState(() {            element.relationTypeError = localization.relationTypeValidate;            firstErrorFocusNode ??= element.relationTypeFocusNode;          });        }        if (element.countryUniversityController.text.isEmpty) {          setState(() {            element.countryUniversityError = localization.universityValidate;            firstErrorFocusNode ??= element.relationTypeFocusNode;          });        }        /// if (element.familyBookNumberController.text.isEmpty) {        ///   setState(() {        ///     element.familyBookNumberError =        ///         "Please Enter your family book number";        ///     firstErrorFocusNode ??= element.familyBookNumberFocusNode;        ///   });        /// }      }    }    /// validate the Phone Number information    if (_phoneNumberList.isNotEmpty) {      for (var element in _phoneNumberList) {        if (element.phoneTypeController.text.isEmpty || element.phoneTypeError != null) {          setState(() {            element.phoneTypeError = localization.submissionPhoneTypeRequired;            firstErrorFocusNode ??= element.phoneTypeFocusNode;          });        }        if (element.phoneNumberController.text.isEmpty || !Validations.isPhoneNumberValid(element.phoneNumberController.text) || element.phoneNumberError != null) {          setState(() {            element.phoneNumberError = localization.phoneNumberOnly;            firstErrorFocusNode ??= element.phoneNumberFocusNode;          });        }        if (element.countryCodeController.text.isEmpty ) {          setState(() {            element.countryCodeError = localization.submissionCountryCodeRequired;            firstErrorFocusNode ??= element.countryCodeFocusNode;          });        }      }    }    /// validate the Address information    if (_addressInformationList.isNotEmpty) {      for (var element in _addressInformationList) {        if (element.addressTypeController.text.isEmpty || element.addressTypeError != null) {          setState(() {            element.addressTypeError = localization.addressTypeValidate;            firstErrorFocusNode ??= element.addressTypeFocusNode;          });        }        if (element.addressLine1Controller.text.isEmpty) {          setState(() {            element.addressLine1Error = localization.addressLine1Validate;            firstErrorFocusNode ??= element.addressLine1FocusNode;          });        }        if (element.countryController.text.isEmpty) {          setState(() {            element.countryError = localization.countryValidate;            firstErrorFocusNode ??= element.countryFocusNode;          });        }        /// if ( element.stateController.text.isEmpty && element.stateDropdownMenuItems?.isNotEmpty ?? false) {        if ( element.stateController.text.isEmpty && (element.stateDropdownMenuItems?.isNotEmpty ?? false)) {        setState(() {            element.stateError = localization.emiratesValidate;            firstErrorFocusNode ??= element.stateFocusNode;          });        }        if (element.cityController.text.isEmpty) {          setState(() {            element.cityError = localization.cityValidate;            firstErrorFocusNode ??= element.cityFocusNode;          });        }      }    }    /// validate military services:    if (_passportNationalityController.text == 'ARE') {      _selectMilitaryServiceStatusErrorText = null;      switch (_isMilitaryService) {        case MilitaryStatus.yes:          if (_militaryServiceStartDateController.text.isEmpty) {            setState(() {              _militaryServiceStartDateErrorText = localization.militaryServiceStartDateValidate;              firstErrorFocusNode ??= _militaryServiceStartDateFocusNode;            });          }          if (_militaryServiceEndDateController.text.isEmpty) {            setState(() {              _militaryServiceEndDateErrorText = localization.militaryServiceEndDateValidate;              firstErrorFocusNode ??= _militaryServiceEndDateFocusNode;            });          }          if (_militaryServiceStartDateController.text == _militaryServiceEndDateController.text) {            setState(() {              _militaryServiceEndDateErrorText = "${localization.militaryServiceEndDateValidate}\nStart Date and end Date cannot be same";              firstErrorFocusNode ??= _militaryServiceEndDateFocusNode;            });          }          break;        case MilitaryStatus.no:          break;        case (MilitaryStatus.exemption || MilitaryStatus.postponed):          if (_reasonForMilitaryController.text.isEmpty) {            setState(() {              _reasonForMilitaryErrorText = localization.militaryReasonValidate;              firstErrorFocusNode ??= _reasonForMilitaryFocusNode;            });          }          break;        case null:          setState(()          {            firstErrorFocusNode = FocusNode();            _selectMilitaryServiceStatusErrorText = "${localization.select} ${localization.militaryServicePanel}";            // _alertService.showErrorSnackBar("${localization.select} ${localization.militaryServicePanel}");          }          );          break;      }    }    /// If any error found, move to the first error focus node    if (firstErrorFocusNode != null) {      FocusScope.of(context).requestFocus(firstErrorFocusNode);      return false;    } else {      _finalForm(isUrlEncoded: true);      /// call save draft on successfull validation      await saveDraft();      return true;    }  }  Future<bool> validateHighSchoolDetails(langProvider)async {    final localization = AppLocalizations.of(context)!;    firstErrorFocusNode = null;    if (displayHighSchool() && _highSchoolList.isNotEmpty) {      for (var element in _highSchoolList) {        if (element.hsLevelController.text.isEmpty || element.hsLevelError != null) {          setState(() {            element.hsLevelError = localization.hsTypeValidate;            firstErrorFocusNode ??= element.hsLevelFocusNode;          });        }        if (element.hsCountryController.text.isEmpty || element.hsCountryError != null) {          setState(() {            element.hsCountryError = localization.countryValidate;            firstErrorFocusNode ??= element.hsCountryFocusNode;          });        }        if (element.schoolStateDropdownMenuItems?.isNotEmpty ?? false) {          if (element.hsStateController.text.isEmpty) {            setState(() {              element.hsStateError = localization.emiratesValidate;              firstErrorFocusNode ??= element.hsStateFocusNode;            });          }        }        if (element.hsCountryController.text == 'ARE') {          if (element.hsNameController.text.isEmpty) {            setState(() {              element.hsNameError = localization.hsNameValidate;              firstErrorFocusNode ??= element.hsNameFocusNode;            });          }        }        if (element.hsCountryController.text != 'ARE' ||            element.hsNameController.text == 'OTH') {            if (element.otherHsNameController.text.isEmpty  || element.otherHsNameError != null) {              setState(() {                element.otherHsNameError = localization.hsnameOtherValidate;                firstErrorFocusNode ??= element.otherHsNameFocusNode;              });            }        }        /// high school type        if (element.hsTypeController.text.isEmpty || element.hsTypeError != null) {          setState(() {            element.hsTypeError = localization.hsTypeValidate;            firstErrorFocusNode ??= element.hsTypeFocusNode;          });        }        /// high school curriculum type        if (element.curriculumTypeController.text.isEmpty || element.curriculumTypeError != null) {          setState(() {            element.curriculumTypeError = localization.curriculumTypesValidate;            firstErrorFocusNode ??= element.curriculumTypeFocusNode;          });        }        /// high school curriculum average        if (element.curriculumAverageController.text.isEmpty || element.curriculumAverageError != null) {          setState(() {            element.curriculumAverageError = localization.curriculumAverageValidate;            firstErrorFocusNode ??= element.curriculumAverageFocusNode;          });        }        if (element.curriculumAverageController.text.isNotEmpty) {          if (element.yearOfPassingController.text.isEmpty || element.yearOfPassingError != null) {            setState(() {              element.yearOfPassingError = localization.hsYearOfPassingValidate;              firstErrorFocusNode ??= element.yearOfPassingFocusNode;            });          }        }        /// Validate high school subject grades and details        if(element.hsDetails.isNotEmpty){          for(var subject in element.hsDetails){            if(subject.required && subject.gradeController.text.isEmpty){              setState(() {                subject.gradeError = localization.gradeValidate;                firstErrorFocusNode ??= subject.gradeFocusNode;              });            }          }          /// validate other high school subjects          if(element.otherHSDetails.isNotEmpty){            for(var subject in element.otherHSDetails){              if(subject.required && subject.otherSubjectNameController.text.isEmpty){                setState(() {                  subject.otherSubjectNameError = localization.otherSubjectNameValidate;                  firstErrorFocusNode ??= subject.otherSubjectNameFocusNode;                });              }              if(subject.required && subject.gradeController.text.isEmpty){                setState(() {                  subject.gradeError = localization.gradeValidate;                  firstErrorFocusNode ??= subject.gradeFocusNode;                });              }            }}}      }    }    if (firstErrorFocusNode != null) {      FocusScope.of(context).requestFocus(firstErrorFocusNode);      return false;    } else {      /// No errors found, return true      /// saving draft      await saveDraft();      return true;    }  }  Future<bool> validateGraduationDetails(langProvider) async{    final localization = AppLocalizations.of(context)!;    firstErrorFocusNode = null;    /// validate graduation details    if (_selectedScholarship?.acadmicCareer != 'SCHL' &&        _selectedScholarship?.acadmicCareer != 'HCHL') {      for (int index = 0; index < _graduationDetailsList.length; index++) {        var element = _graduationDetailsList[index];        validateGraduationDetails(element) {          if (element.currentlyStudying && element.showCurrentlyStudying) {            /// validating last term            if (element.lastTermController.text.isEmpty || element.lastTermError != null) {              setState(() {                element.lastTermError = localization.lastTermRequired;                firstErrorFocusNode ??= element.lastTermFocusNode;              });            }          }/// #################################################################          /// Condition using index and scholarship details          if (index > 0 &&              _selectedScholarship?.acadmicCareer != 'UGRD' &&              _selectedScholarship?.acadmicCareer != 'DDS') {            /// validating graduation level            if (element.levelController.text.isEmpty || element.levelError != null) {              setState(() {                element.levelError = localization.hsGraduationLevelValidate;                firstErrorFocusNode ??= element.levelFocusNode;              });            }          }          /// #################################################################          /// validating dds graduation level          if (index != 0 && _selectedScholarship?.acadmicCareer == 'DDS') {            if (element.levelController.text.isEmpty || element.levelError != null) {              setState(() {                element.levelError = localization.hsGraduationLevelValidate;                firstErrorFocusNode ??= element.levelFocusNode;              });            }          }          /// #################################################################          /// validating graduation country          if (element.countryController.text.isEmpty || element.countryError != null) {            setState(() {              element.countryError = localization.countryValidate;              firstErrorFocusNode ??= element.countryFocusNode;            });          }          /// #################################################################          /// high school university          if (_selectedScholarship?.acadmicCareer != 'DDS') {            if (element.universityController.text.isEmpty || element.universityError !=null) {              setState(() {                element.universityError = localization.hsUniversityValidate;                firstErrorFocusNode ??= element.universityFocusNode;              });            }          }          /// #################################################################          /// other university          if (element.universityController.text == 'OTH') {            if (element.otherUniversityController.text.isEmpty || element.otherUniversityError != null) {              setState(() {                element.otherUniversityError = _selectedScholarship?.acadmicCareer != 'DDS'                    ? localization.hsOtherUniversityValidate                    : localization.ddsOtherUniversityRequired;                firstErrorFocusNode ??= element.otherUniversityFocusNode;              });            }          }          /// #################################################################          /// major          if (element.majorController.text.isEmpty || element.majorError != null) {            setState(() {              element.majorError = _selectedScholarship?.acadmicCareer != 'DDS'                  ? localization.hsMajorValidate                  : localization.ddsMajorValidate;              firstErrorFocusNode ??= element.majorFocusNode;            });          }          /// #################################################################          /// cgpa          if (element.cgpaController.text.isEmpty || element.cgpaError != null) {            setState(() {              element.cgpaError = localization.cgpaValidate;              firstErrorFocusNode ??= element.cgpaFocusNode;            });          }          /// #################################################################          if (element.graduationStartDateController.text.isEmpty || element.graduationStartDateError != null) {            setState(() {              element.graduationStartDateError = localization.hsGraducationStartDateValidate;              firstErrorFocusNode ??= element.graduationStartDateFocusNode;            });          }          /// #################################################################          /// graduation end data          element.graduationEndDateError = null;          if ((!element.currentlyStudying && element.levelController.text.isNotEmpty)) {            if (element.graduationEndDateController.text.isEmpty || element.graduationEndDateError != null) {              setState(() {                element.graduationEndDateError = localization.hsGraducationEndDateValidate;                firstErrorFocusNode ??= element.graduationEndDateFocusNode;              });            }            if (element.graduationEndDateController.text == element.graduationStartDateController.text) {              setState(() {                element.graduationEndDateError = "${localization.hsGraducationEndDateValidate}\nPlease Enter correct start and end Date";                firstErrorFocusNode ??= element.graduationEndDateFocusNode;              });            }          }          /// #################################################################          /// Are you currently receiving scholarship or grant from other university          if (_selectedScholarship?.acadmicCareer == 'DDS') {            _selectSponsorshipErrorText = null;            if (havingSponsor.isEmpty) {              _selectSponsorshipErrorText = localization.ddsGradQuestion;              // _alertService.showErrorSnackBar(localization.ddsGradQuestion,);              firstErrorFocusNode = FocusNode();              return false;            }          }          /// #################################################################          /// sponsorship name          if ((havingSponsor == 'Y') ||              _selectedScholarship?.acadmicCareer != 'DDS') {            if (element.sponsorShipController.text.isEmpty || element.sponsorShipError != null) {              setState(() {                element.sponsorShipError = localization.hsSponsorshipValidate;                firstErrorFocusNode ??= element.sponsorShipFocusNode;              });            }          }          /// #################################################################          if (element.levelController.text == 'PGRD' ||              element.levelController.text == 'PG' ||              element.levelController.text == 'DDS') {            /// case study title            if (element.caseStudyTitleController.text.isEmpty || element.caseSudyError != null) {              setState(() {                element.caseStudyTitleError = localization.caseStudyTitleValidate;                firstErrorFocusNode ??= element.caseStudyTitleFocusNode;              });            }            /// case study start year            if (element.caseStudyStartYearController.text.isEmpty || element.caseStudyStartYearError != null) {              setState(() {                element.caseStudyStartYearError = localization.caseStudyStartYearValidate;                firstErrorFocusNode ??= element.caseStudyStartYearFocusNode;              });            }            /// case study description            if (element.caseStudyDescriptionController.text.isEmpty || element.caseStudyDescriptionError !=  null) {              setState(() {                element.caseStudyDescriptionError = localization.caseStudyDescriptionValidate;                firstErrorFocusNode ??= element.caseStudyDescriptionFocusNode;              });            }          }          /// #################################################################        }        if (_selectedScholarship?.acadmicCareer == 'UGRD' && element.currentlyStudying) {          validateGraduationDetails(element);        }        if (_selectedScholarship?.acadmicCareer != 'UGRD') {          validateGraduationDetails(element);        }      }    }    if (firstErrorFocusNode != null) {      FocusScope.of(context).requestFocus(firstErrorFocusNode);      return false;    } else {      /// No errors found, return true      await saveDraft();      return true;    }  }  Future<bool> validateUniversityAndMajorsDetails(langProvider)async {    final localization = AppLocalizations.of(context)!;    firstErrorFocusNode = null;    /// academic program pgrd    if (_selectedScholarship?.acadmicCareer == 'PGRD' &&        _selectedScholarship?.acadmicCareer != 'DDS') {      if (_acadProgramPgrdController.text.isEmpty || _acadProgramErrorText != null) {        setState(() {          _acadProgramPgrdErrorText = localization.pgrdAdacProgramRequired;          firstErrorFocusNode ??= _acadProgramPgrdFocusNode;        });      }}/// #################################################################    /// major    /// applicationForm.applicationData.acadCareer ne 'DDS' and rowIndex.index eq 0    if( _selectedScholarship?.acadmicCareer != 'DDS'){      for (int i = 0; i < _majorsWishlist.length; i++) {        var element = _majorsWishlist[i];        if (i == 0 && (element.majorController.text.isEmpty || element.majorError != null) ) {          setState(() {            element.majorError = localization.majorsValidate;            firstErrorFocusNode ??= element.majorFocusNode;          });        }        if (element.majorError != null) {          setState(() {            element.majorError = localization.majorsValidate;            firstErrorFocusNode ??= element.majorFocusNode;          });          if(element.majorController.text == 'OTH'){            if(element.otherMajorController.text.isEmpty || element.otherMajorError != null){              setState(() {                element.otherMajorError = localization.otherMajorValidate;                firstErrorFocusNode ??= element.otherMajorFocusNode;              });            }          }          }      }    }/// #################################################################    /// academic program dds    if (_selectedScholarship?.acadmicCareer == 'DDS') {      if (_acadProgramDdsController.text.isEmpty || _acadProgramDdsErrorText != null) {        setState(() {          _acadProgramDdsErrorText = localization.ddsMajorRequired;          firstErrorFocusNode ??= _acadProgramDdsFocusNode;        });      }    }    /// #################################################################    /// university wishlish validation    if (_selectedScholarship?.acadmicCareer != 'HCHL') {      for (int i = 0; i < _universityPriorityList.length; i++) {        var element = _universityPriorityList[i];        if (!isStudyCountry && element.countryIdController.text.isEmpty) {          setState(() {            element.countryIdError = localization.countryRequired;            firstErrorFocusNode ??= element.countryIdFocusNode;          });        }        /// #################################################################        /// On Web is paused also        // if (_selectedScholarship?.acadmicCareer != 'DDS') {        //   if (element.majorsController.text.isEmpty) {        //     setState(() {        //       element.majorsError = "Please Select Your Major";        //       firstErrorFocusNode ??= element.majorsFocusNode;        //     });        //   }        // }        /// #################################################################        /// validate other major        if(element.majorsController.text == 'OTH'){          if (_selectedScholarship?.acadmicCareer != 'DDS' &&              element.majorsController.text == 'OTH' &&              (element.countryIdController.text.isNotEmpty ||                  element.otherMajorsController.text.isNotEmpty ||                  element.otherUniversityNameController.text.isNotEmpty ||                  element.statusController.text.isNotEmpty)) {            if (element.majorsController.text.isEmpty) {              setState(() {                element.otherMajorsError = localization.ddsOtherMajorRequired;                firstErrorFocusNode ??= element.otherMajorsFocusNode;              });            }          }        }/// #################################################################//         / validate university//         / Also paused validation for university on web        if (_selectedScholarship?.acadmicCareer != 'DDS') {          if (element.universityIdController.text.isEmpty || element.universityIdError != null) {            setState(() {              element.universityIdError = localization.universityValidate;              firstErrorFocusNode ??= element.universityIdFocusNode;            });          }        }/// #################################################################        /// validate other university        if(element.universityIdController.text == 'OTH'){          if (_selectedScholarship?.acadmicCareer != 'DDS' &&              (element.countryIdController.text.isNotEmpty ||                  element.otherMajorsController.text.isNotEmpty ||                  element.otherUniversityNameController.text.isNotEmpty ||                  element.statusController.text.isNotEmpty)) {            if (element.otherUniversityNameController.text.isEmpty) {              setState(() {                element.otherUniversityNameError = localization.ddsOtherUniversityRequired;                firstErrorFocusNode ??= element.otherUniversityNameFocusNode;              });            }          }        }        /// #################################################################        if (_selectedScholarship?.acadmicCareer != 'DDS' &&            (element.countryIdController.text.isNotEmpty ||                element.otherMajorsController.text.isNotEmpty ||                element.otherUniversityNameController.text.isNotEmpty ||                element.statusController.text.isNotEmpty)) {          if (element.statusController.text.isEmpty) {            setState(() {              element.statusError = localization.universityStatusRequired;              firstErrorFocusNode ??= element.statusFocusNode;            });          }        }      }    }    /// checking for fist error node    if (firstErrorFocusNode != null) {      FocusScope.of(context).requestFocus(firstErrorFocusNode);      return false;    } else {      /// No errors found, return true      await saveDraft();      return true;    }  }  Future<bool> validateRequiredExaminations(langProvider) async{    final localization = AppLocalizations.of(context)!;    for (int i = 0; i < _requiredExaminationList.length; i++) {      firstErrorFocusNode = null;      var element = _requiredExaminationList[i];      if (element.examinationError != null ) {        setState(() {          element.examinationError = localization.duplicateExaminationMessage;          firstErrorFocusNode ??= element.examinationFocusNode;        });      }      if (element.examinationController.text.isNotEmpty && element.examinationTypeIdController.text.isEmpty && (element.examinationTypeDropdown?.isNotEmpty ?? false || element.examinationTypeDropdown != null)) {        setState(() {          element.examinationTypeIdError = localization.examinationTypeValidate;          firstErrorFocusNode ??= element.examinationTypeIdFocusNode;        });      }      // if (element.examinationGradeController.text.isEmpty) {      //   setState(() {      //     element.examinationGradeError = "Please Enter Examination Grade";      //     firstErrorFocusNode ??= element.examinationGradeFocusNode;      //   });      // }      if (element.examinationController.text.isNotEmpty && element.examDateController.text.isEmpty) {        setState(() {          element.examDateError = localization.dateExamValidate;          firstErrorFocusNode ??= element.examDateFocusNode;        });      }    }    /// checking for fist error node    if (firstErrorFocusNode != null) {      FocusScope.of(context).requestFocus(firstErrorFocusNode);      return false;    } else {      /// No errors found, return true      await saveDraft();      return true;    }  }  Future<bool> validateEmploymentHistory(langProvider) async{    final localization = AppLocalizations.of(context)!;    firstErrorFocusNode = null;    /// validate employment history    /// select employment status    _selectEmploymentHistoryErrorText = null;    if (_employmentStatus == null || _employmentStatus == '') {      _selectEmploymentHistoryErrorText = "${localization.previouslyEmployed} ?";      // _alertService.showToast(message: "${localization.previouslyEmployed} ?",          // context: context,      // );    }    if (_employmentStatus != null &&        _employmentStatus != '' &&        _employmentStatus != 'N') {      for (int i = 0; i < _employmentHistoryList.length; i++) {        var element = _employmentHistoryList[i];        /// employer name        if (element.employerNameController.text.isEmpty || element.employerNameError != null) {          setState(() {            element.employerNameError = localization.emphistEmployerNameValidate;            firstErrorFocusNode ??= element.employerNameFocusNode;          });        }        /// designation        if (element.titleController.text.isEmpty || element.titleError != null) {          setState(() {            element.titleError = localization.emphistTitleNameValidate;            firstErrorFocusNode ??= element.titleFocusNode;          });        }        ///work place        if (element.placeController.text.isEmpty || element.placeError != null) {          setState(() {            element.placeError = localization.emphistPlaceValidate;            firstErrorFocusNode ??= element.placeFocusNode;          });        }        ///occupation        if (element.occupationController.text.isEmpty || element.occupationError != null) {          setState(() {            element.occupationError = localization.emphistOccupationNameValidate;            firstErrorFocusNode ??= element.occupationFocusNode;          });        }        /// start date        if (element.startDateController.text.isEmpty || element.startDateError != null) {          setState(() {            element.startDateError = localization.employmentStartDateRequired;            firstErrorFocusNode ??= element.startDateFocusNode;          });        }        /// end date        if (_employmentStatus == 'P' &&           ( element.endDateController.text.isEmpty || element.endDateError != null)) {          setState(() {            element.endDateError = localization.employmentEndDateRequired;            firstErrorFocusNode ??= element.endDateFocusNode;          });        }        /// end date        if (element.endDateController.text.isNotEmpty && (element.endDateController.text == element.startDateController.text)) {          setState(() {            element.endDateError = "${localization.employmentEndDateRequired}\nPlease correct start and End Date";            firstErrorFocusNode ??= element.endDateFocusNode;          });        }        /// reporting manager        if (element.reportingManagerController.text.isEmpty || element.reportingManagerError != null) {          setState(() {            element.reportingManagerError = localization.emphistReportingManagerValidate;            firstErrorFocusNode ??= element.reportingManagerFocusNode;          });        }        /// contact number        if (element.contactNumberController.text.isEmpty || element.contactNumberError != null) {          setState(() {            element.contactNumberError = localization.emphistMgrContactNoValidate;            firstErrorFocusNode ??= element.contactNumberFocusNode;          });        }        /// email        if (element.contactEmailController.text.isEmpty || element.contactEmailError != null) {          setState(() {            element.contactEmailError = localization.registrationEmailAddressValidate;            firstErrorFocusNode ??= element.contactEmailFocusNode;          });        }      }    }    /// checking for fist error node    if (firstErrorFocusNode != null ||        _employmentStatus == null ||        _employmentStatus == '') {      FocusScope.of(context).requestFocus(firstErrorFocusNode);      return false;    } else {      /// No errors found, return true      await saveDraft();      return true;    }  }  bool isAttachmentRequiredForUser(Attachment attachment) {    if (_passportNationalityController.text == 'ARE' && (_isMotherUAECheckbox == false)) {      return attachment.requiredController.text == 'MRL';    } else if (_passportNationalityController.text != 'ARE' && (_isMotherUAECheckbox == false)) {      return attachment.requiredController.text == 'NMRL' ;    } else if (_passportNationalityController.text != 'ARE' && _isMotherUAECheckbox) {      return attachment.requiredController.text == 'XMRL';    }    return false;  }  showReqAttachmentName(langProvider,myAttachment) {    final localization = AppLocalizations.of(context);    _alertService.showErrorSnackBar(        "${localization?.uploadAttachments}: ${getFullNameFromLov(langProvider: langProvider,lovCode: _selectedCheckListCode,code:myAttachment.attachmentNameController.text)}"    );  }  Future<bool> validateAttachmentsSection(langProvider) async{    firstErrorFocusNode = null;    // print(_filteredMyAttachmentsList.length);    for(int index = 0; index < _filteredMyAttachmentsList.length; index++) {      // final attachment = _filteredAttachmentsList[index];      final myAttachment = _filteredMyAttachmentsList[index];      /// Only show the AttachFile widget if conditions are met      /// We are checking that if according to attachments requirements if the attachment is required then ask user to attach that if not then remove the item from list also.      /// For scholarship INTERNAL      if (isStudyCountry && isAttachmentRequiredForUser(myAttachment)) {        if(myAttachment.userFileNameController.text.isEmpty){          showReqAttachmentName(langProvider, myAttachment);          return false;        }      }      /// For scholarship EXTERNAL      if(!isStudyCountry){        final requiredText = myAttachment.requiredController.text;        if( myAttachment.userFileNameController.text.isEmpty && (requiredText == 'MRL' ||requiredText ==  'NMRL' ||requiredText ==  'XMRL')){        // if( myAttachment.userFileNameController.text.isEmpty){          showReqAttachmentName(langProvider, myAttachment);          return false;        }      }    }      await saveDraft();      return true; /// All required attachments are present  }  @override  void dispose() {    /// Dispose controllers    _militaryServiceController.dispose();    _militaryServiceStartDateController.dispose();    _militaryServiceEndDateController.dispose();    _reasonForMilitaryController.dispose();    /// Dispose focus nodes    _militaryServiceFocusNode.dispose();    _militaryServiceStartDateFocusNode.dispose();    _militaryServiceEndDateFocusNode.dispose();    _reasonForMilitaryFocusNode.dispose();    super.dispose();  }  /// *----------------------------------------------------------------------------- Custom Widgets for Scholarship Form only start --------------------------------------------------------------------------------------------------***  /// text field style which is used to styling hint and actual text  final TextStyle textFieldTextStyle = AppTextStyles.titleTextStyle().copyWith(      fontSize: 14,      fontWeight: FontWeight.w500,      color: AppColors.scoButtonColor,  );  /// Buttons Section (Previous, Next, Save Draft)  Widget draftPrevNextButtons(langProvider) {    return Directionality(textDirection: getTextDirection(langProvider), child: Padding(      padding: EdgeInsets.symmetric(vertical: kPadding),      child: SizedBox(        width: double.infinity,        child: Wrap(          alignment: WrapAlignment.end,          runAlignment: WrapAlignment.end,          runSpacing: 10,          spacing: 10,          children: <Widget>[            saveDraftButton(context),            Wrap(spacing: 10, children: <Widget>[              if(_currentSectionIndex != 0) previousButton(),              nextButton(langProvider),            ],            ),          ],        ),      ),    ));  }  Widget saveDraftButton(BuildContext context) {    final localization = AppLocalizations.of(context)!;    return Consumer<SaveAsDraftViewmodel>(      builder: (context, provider, _) {        final status = provider.apiResponse.status;        return MaterialButton(          onPressed: status == Status.LOADING ? null : saveDraft,          color: AppColors.scoButtonColor,          textColor: Colors.white,          height: 40,          materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(kSmallButtonRadius)),          child: status == Status.LOADING              ? SizedBox(                  height: 10,                  width: 10,                  child: Utils.cupertinoLoadingIndicator())              :  Text(                  localization.saveDraft,                  style: const TextStyle(fontSize: 12),                ),        );      },    );  }  Widget previousButton() {    final localization = AppLocalizations.of(context)!;    return MaterialButton(      onPressed: _currentSectionIndex > 0 ? previousSection : null,      color: AppColors.hintDarkGrey,      height: 40,      textColor: Colors.white,      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(kSmallButtonRadius)),      child: Text(        localization.previous,        style: const TextStyle(fontSize: 12),      ),    );  }  Widget nextButton(langProvider) {    final localization = AppLocalizations.of(context)!;    return MaterialButton(      // color: AppColors.lightBlue2,      color: AppColors.scoThemeColor,      height: 40,      textColor: Colors.white,      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(kSmallButtonRadius)),      // onPressed: (){      //   _finalForm();      // },      onPressed: _currentSectionIndex == totalSections-1 ? ()async{        await _submitApplication(langProvider);        // if(_iAgreeTerms){        //   /// submit Application function        //   showDialog(context: context, builder: (context){        //     return Dialog(        //       alignment: Alignment.center,        //       backgroundColor: Colors.transparent,        //       child:  CustomInformationContainer(        //         title: localization.confirmation_title,        //         trailing: GestureDetector(onTap:(){_navigationService.goBack();},child: const Icon(Icons.close,color: Colors.white,)),        //         expandedContent: Column(        //           children: [        //        //             kFormHeight,        //             Text( "Are your sure?",style: AppTextStyles.titleTextStyle(),),        //        //             kFormHeight,        //             Text( localization.applicationUpdateConfirm,style: AppTextStyles.normalTextStyle(),),        //             kFormHeight,        //             Wrap(        //        //               alignment: WrapAlignment.spaceBetween,        //               runAlignment: WrapAlignment.spaceBetween,        //               runSpacing: 10,        //               spacing: 20,        //        //        //               children: [        //                 /// MaterialButton(child: Text("No",style: TextStyle(color: AppColors.scoThemeColor),),  onPressed: (){},color: Colors.white,shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(kCardRadius)),),        //                 SizedBox(        //                   width: screenWidth/4,        //                   child: CustomButton(buttonName: localization.no, isLoading: false, textDirection: getTextDirection(langProvider), onTap: (){_navigationService.goBack();},buttonColor: Colors.white,borderColor: AppColors.scoThemeColor,textColor: AppColors.scoThemeColor,),        //                 ),        //        //        //                 // submit the application:        //                 SizedBox(        //                     width: screenWidth/4,        //                     child: Consumer<SubmitApplicationViewmodel>(builder:(context,submitApplicationProvider,_){        //                       return CustomButton(buttonName: localization.yes,        //                           isLoading: submitApplicationProvider.apiResponse.status == Status.LOADING,        //                           textDirection:        //                           getTextDirection(langProvider)        //                           ,        //                           // buttonColor: AppColors.scoThemeColor,        //                           textColor: Colors.white,borderColor: Colors.transparent,        //                           // onTap: ()async{        //                           //   /// to close the confirmation popup        //                           //        //                           //   _navigationService.goBack();        //                           //   setProcessingMode(status: true);        //                           //        //                           //   log(form['applicationData'].toString());        //                           // bool submitted  =  await submitApplicationProvider.submitApplication(form: form['applicationData']);        //                           // if(submitted){        //                           //   setState(() {        //                           //     _applicationNumber = submitApplicationProvider.apiResponse.data?.data?.applicationNumber.toString() ?? "0";        //                           //     _applicationSubmitted = true;        //                           //   });        //                           //   setProcessingMode(status: false);        //                           ////   await Provider.of<GetRoleViewModel>(context,listen:false).getRoles();        //                           // }        //                           // }        //                           onTap: () async {        //                             // Close the confirmation popup        //                             _navigationService.goBack();        //        //                             setProcessingMode(status: true);        //        //                             // log(form['applicationData'].toString());        //        //                             // Retrieve the provider before starting async operations        //                             final getRolesProvider = Provider.of<GetRoleViewModel>(context, listen: false);        //        //                             // Perform the submission        //                             /// TODO: Uncomment this        //                             // bool submitted = await submitApplicationProvider.submitApplication(form: form['applicationData']);        //        //                             if (mounted) { // Check if the widget is still mounted        //                               // if (submitted) {        //                                 // TODO: Set submitted        //                               if (true) {        //                                 setState(() {        //                                   _applicationNumber = submitApplicationProvider.apiResponse.data?.data?.applicationNumber.toString() ?? "0";        //                                   _applicationSubmitted = true;        //                                 });        //        //                                 setProcessingMode(status: false);        //        //                                 // Fetch roles safely        //                                 await getRolesProvider.getRoles();        //                               } else {        //                                 setProcessingMode(status: false);        //                               }        //                             }        //                           }        //        //        //        //                       )        //        //        //                       ;        //                     })        //                 ),        //               ],        //             ),        //             kFormHeight,        //             kFormHeight,        //        //           ],        //         ),        //       ),        //        //     );        //        //        //   });        // }        // else{        //   _alertService.toastMessage(localization.submissionAgreeRequired);        // }      }:          () async {        /// modelProgressHud        setProcessingMode(status: true);        /// run validations function        final validationResult = await validateSection(step: _currentSectionIndex, langProvider: langProvider);        if (validationResult) {          nextSection(); /// Only move to the next section if validation passes          /// modelProgressHud          setProcessingMode(status: false);        } else {          /// modelProgressHud          setProcessingMode(status: false);          /// Optionally show a validation error message (like a SnackBar)          // _alertService.showErrorSnackBar(localization.pleaseFillAllRequiredFields,);        }      },      child:  Text(        _currentSectionIndex == totalSections-1 ? localization.submit: localization.next,        style: const TextStyle(fontSize: 12),      ),    );  }  /// Submit Application function  _submitApplication(langProvider)async{    final localization = AppLocalizations.of(context)!;    if(_acceptStudentUndertaking){      /// submit Application function      showDialog(context: context, builder: (context){        return Dialog(          alignment: Alignment.center,          backgroundColor: Colors.transparent,          child:  CustomInformationContainer(            title: localization.confirmation_title,            trailing: GestureDetector(onTap:(){_navigationService.goBack();},child: const Icon(Icons.close,color: Colors.white,)),            expandedContent: Column(              children: [                kFormHeight,                Text( localization.areYouSure,style: AppTextStyles.titleTextStyle(),),                kFormHeight,                Text( localization.applicationUpdateConfirm,style: AppTextStyles.normalTextStyle(),textAlign: TextAlign.center,),                kFormHeight,                Wrap(                  alignment: WrapAlignment.spaceBetween,                  runAlignment: WrapAlignment.spaceBetween,                  runSpacing: 10,                  spacing: 20,                  children: [                    /// MaterialButton(child: Text("No",style: TextStyle(color: AppColors.scoThemeColor),),  onPressed: (){},color: Colors.white,shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(kCardRadius)),),                    SizedBox(                      width: screenWidth/4,                      child: CustomButton(buttonName: localization.no, isLoading: false, textDirection: getTextDirection(langProvider), onTap: (){_navigationService.goBack();},buttonColor: Colors.white,borderColor: AppColors.scoThemeColor,textColor: AppColors.scoThemeColor,),                    ),                    // submit the application:                    SizedBox(                        width: screenWidth/4,                        child: Consumer<SubmitApplicationViewmodel>(builder:(context,submitApplicationProvider,_){                          return CustomButton(buttonName: localization.yes,                              isLoading: submitApplicationProvider.apiResponse.status == Status.LOADING,                              textDirection:                              getTextDirection(langProvider)                              ,                              // buttonColor: AppColors.scoThemeColor,                              textColor: Colors.white,borderColor: Colors.transparent,                              // onTap: ()async{                              //   /// to close the confirmation popup                              //                              //   _navigationService.goBack();                              //   setProcessingMode(status: true);                              //                              //   log(form['applicationData'].toString());                              // bool submitted  =  await submitApplicationProvider.submitApplication(form: form['applicationData']);                              // if(submitted){                              //   setState(() {                              //     _applicationNumber = submitApplicationProvider.apiResponse.data?.data?.applicationNumber.toString() ?? "0";                              //     _applicationSubmitted = true;                              //   });                              //   setProcessingMode(status: false);                              ////   await Provider.of<GetRoleViewModel>(context,listen:false).getRoles();                              // }                              // }                              onTap: () async {                                // Close the confirmation popup                                _navigationService.goBack();                                setProcessingMode(status: true);                                // log(form['applicationData'].toString());                                // Retrieve the provider before starting async operations                                final getRolesProvider = Provider.of<GetRoleViewModel>(context, listen: false);                                // Perform the submission                                bool submitted = await submitApplicationProvider.submitApplication(form: form['applicationData']);                                if (mounted) { // Check if the widget is still mounted                                  if (submitted) {                                    setState(() {                                      _applicationNumber = submitApplicationProvider.apiResponse.data?.data?.applicationNumber.toString() ?? "0";                                      _applicationSubmitted = true;                                    });                                    setProcessingMode(status: false);                                    // Fetch roles safely                                    await getRolesProvider.getRoles();                                  } else {                                    setProcessingMode(status: false);                                  }                                }                              }                              )                          ;                        })                    ),                  ],                ),                kFormHeight,                kFormHeight,              ],            ),          ),        );      });    }    else{      _acceptStudentUndertakingErrorText = localization.studentUndertakingRequired;      // _alertService.showErrorSnackBar(localization.studentUndertakingRequired);    }  }  /// *----------------------------------------------------------------------------- Custom Widgets for Scholarship Form only end --------------------------------------------------------------------------------------------------***  Map<String, dynamic> form = {};  /// the final form which we have to submit  void _finalForm({bool isUrlEncoded = false}) async {    final highSchoolRecords = _highSchoolList.map((element) => element.toJson()).toList();    final graduationRecords = _graduationDetailsList.map((element) => element.toJson()).toList();    final String highestQualification = getHighestQualification(academicCareer: _selectedScholarship?.acadmicCareer, scholarshipType: _selectedScholarship?.scholarshipType, highSchoolRecords: highSchoolRecords, graduationRecords: graduationRecords, graduationDetailsList: _graduationDetailsList);    // final logger = Logger();    // logger.d(highestQualification);    // logger.d(highSchoolRecords);    // logger.d(graduationRecords);    form = {      "applicationData": {        // "specialCase" = '',        "sccTempId": "",        "acadCareer": _selectedScholarship?.acadmicCareer.trim() ?? '',        /// "studentCarNumber": _selectedScholarship?.ca,        "institution": _selectedScholarship?.institution.trim() ?? '',        "admApplCtr": _selectedScholarship?.admApplicationCenter.trim() ?? '',        "admitType": _selectedScholarship?.admitType.trim() ?? '',        "admitTerm": _selectedScholarship?.admitTerm.trim() ?? '',        "citizenship": _passportNationalityController.text.trim() ,        "acadProgram": _selectedScholarship?.acadmicProgram.trim() ?? '',        "programStatus": _selectedScholarship?.programStatus.trim() ?? '',        "programAction": _selectedScholarship?.programAction.trim() ?? '',        "acadLoadAppr": _selectedScholarship?.acadLoadAppr.trim() ?? '',        "campus": _selectedScholarship?.campus.trim() ?? '',        /// "planSequence": null,        "acadPlan": _selectedScholarship?.acadmicPlan.trim() ?? '',        // "username": _emiratesIdController.text ?? '',        "scholarshipType": _selectedScholarship?.scholarshipType.trim() ?? '',        /// "password": null,        "country": _passportNationalityController.text.trim(),        /// "errorMessage": "",        "studyCountry": isStudyCountry,        "dateOfBirth": _dateOfBirthController.text.trim(),        "placeOfBirth": _placeOfBirthController.text.trim(),        "gender": _genderController.text.trim(),        "maritalStatus": _maritalStatusController.text.trim(),        "emailId": _studentEmailController.text.trim(),        "passportId": _passportNumberController.text.trim(),        "passportExpiryDate": _passportExpiryDateController.text.trim(),        "passportIssueDate": _passportIssueDateController.text.trim(),        "passportIssuePlace": _passportPlaceOfIssueController.text.trim(),        "unifiedNo": _passportUnifiedNoController.text.trim(),        "emirateId": _emiratesIdController.text.replaceAll('-', '').trim(),        "emirateIdExpiryDate": _emiratesIdExpiryDateController.text.trim(),        "uaeMother": _isMotherUAECheckbox,        "otherNumber": "",        "relativeStudyinScholarship": _isRelativeStudyingFromScholarship ?? false,        /// "graduationStatus": null,        "cohortId": _selectedScholarship?.cohort.trim() ?? '',        "scholarshipSubmissionCode": _selectedScholarship?.configurationKey.trim() ?? '',        "highestQualification": highestQualification,        "havingSponser": havingSponsor,        "familyNo": _familyInformationEmiratesController.text.trim(),        "town": _familyInformationTownVillageNoController.text.trim(),        "parentName": _familyInformationParentGuardianNameController.text.trim(),        "relationType": _familyInformationRelationTypeController.text.trim(),        "familyNumber": _familyInformationFamilyBookNumberController.text.trim(),        "motherName": _familyInformationMotherNameController.text.trim(),        "militaryService": _militaryServiceController.text.trim(),        "militaryServiceStartDate": _militaryServiceStartDateController.text.trim(),        "militaryServiceEndDate": _militaryServiceEndDateController.text.trim(),        "reasonForMilitarty": _reasonForMilitaryController.text.trim(),        "nameAsPasport": _nameAsPassport.map((element) => element.toJson()).toList(),        /// Add to form if relative studying fromm scholarship is true        if(_isRelativeStudyingFromScholarship != null && (_isRelativeStudyingFromScholarship ?? false))        "relativeDetails": _relativeInfoList.map((element) => element.toJson()).toList(),        "phoneNunbers": _phoneNumberList.map((element) => element.toJson()).toList(),        "addressList": _addressInformationList.map((element) => element.toJson()).toList(),        if(displayHighSchool()) "highSchoolList": highSchoolRecords,        // "highSchoolList": _highSchoolList.map((element) => element.toJson()).toList(),        // "graduationList": _graduationDetailsList.map((element) => element.toJson()).toList(),        if(shouldShowGraduationSection(_selectedScholarship?.acadmicCareer))"graduationList": graduationRecords,        "acadProgramDds": _acadProgramDdsController.text,        "acadProgramPgrd": _acadProgramPgrdController.text,        "majorWishList": _majorsWishlist.map((element) => element.toJson()).toList(),        "universtiesPriorityList": _universityPriorityList.map((element) => element.toJson()).toList(),        "requiredExaminationList": _requiredExaminationList.map((element) => element.toJson()).toList(),        "employmentStatus": _employmentStatus.toString(),        if(displayEmploymentHistory())        "emplymentHistory": _employmentHistoryList.map((element) => element.toJson()).toList(),        /// "attachments": _myAttachmentsList.map((element) => element.toJson()).toList(),        "attachments": _filteredMyAttachmentsList.map((element)=>element.toJson()).toList()        /// Rest of the fields...      }    };    // logger.d(form);  }}